$date
	Tue Dec 31 17:49:28 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module NN_registers_tb $end
$var wire 32 ! wbs_dat_o [31:0] $end
$var wire 1 " wbs_ack_o $end
$var wire 32 # w32 [31:0] $end
$var wire 32 $ w31 [31:0] $end
$var wire 32 % w22 [31:0] $end
$var wire 32 & w21 [31:0] $end
$var wire 32 ' w12 [31:0] $end
$var wire 32 ( w11 [31:0] $end
$var wire 32 ) opB [31:0] $end
$var wire 32 * opA [31:0] $end
$var wire 32 + final_res [31:0] $end
$var wire 32 , b3 [31:0] $end
$var wire 32 - b2 [31:0] $end
$var wire 32 . b1 [31:0] $end
$var reg 32 / NN_result [31:0] $end
$var reg 1 0 clk $end
$var reg 1 1 ready $end
$var reg 1 2 rst_l $end
$var reg 32 3 wbs_adr_i [31:0] $end
$var reg 32 4 wbs_dat_i [31:0] $end
$var reg 1 5 wren $end
$scope module uut $end
$var wire 32 6 NN_result [31:0] $end
$var wire 32 7 b1 [31:0] $end
$var wire 32 8 b2 [31:0] $end
$var wire 32 9 b3 [31:0] $end
$var wire 1 0 clk $end
$var wire 32 : opA_ns [31:0] $end
$var wire 32 ; opB_ns [31:0] $end
$var wire 1 1 ready $end
$var wire 32 < result_ns [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 = w11 [31:0] $end
$var wire 32 > w12 [31:0] $end
$var wire 32 ? w21 [31:0] $end
$var wire 32 @ w22 [31:0] $end
$var wire 32 A w31 [31:0] $end
$var wire 32 B w32 [31:0] $end
$var wire 1 " wbs_ack_o $end
$var wire 32 C wbs_adr_i [31:0] $end
$var wire 32 D wbs_dat_i [31:0] $end
$var wire 32 E wbs_dat_o [31:0] $end
$var wire 1 F wr_opA $end
$var wire 1 G wr_opB $end
$var wire 1 H wr_result $end
$var wire 1 5 wren $end
$var wire 32 I w32_reg [31:0] $end
$var wire 32 J w31_reg [31:0] $end
$var wire 32 K w22_reg [31:0] $end
$var wire 32 L w21_reg [31:0] $end
$var wire 32 M w12_reg [31:0] $end
$var wire 32 N w11_reg [31:0] $end
$var wire 32 O opB [31:0] $end
$var wire 32 P opA [31:0] $end
$var wire 32 Q final_res [31:0] $end
$var wire 32 R b3_reg [31:0] $end
$var wire 32 S b2_reg [31:0] $end
$var wire 32 T b1_reg [31:0] $end
$var wire 1 U addr_w32 $end
$var wire 1 V addr_w31 $end
$var wire 1 W addr_w22 $end
$var wire 1 X addr_w21 $end
$var wire 1 Y addr_w12 $end
$var wire 1 Z addr_w11 $end
$var wire 1 [ addr_result $end
$var wire 1 \ addr_b3 $end
$var wire 1 ] addr_b2 $end
$var wire 1 ^ addr_b1 $end
$var wire 1 _ addr_B $end
$var wire 1 ` addr_A $end
$scope module b1_ff $end
$var wire 1 0 clk $end
$var wire 32 a din [31:0] $end
$var wire 1 b en $end
$var wire 32 c in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 d dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 e din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 f dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module b2_ff $end
$var wire 1 0 clk $end
$var wire 32 g din [31:0] $end
$var wire 1 h en $end
$var wire 32 i in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 j dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 k din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 l dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module b3_ff $end
$var wire 1 0 clk $end
$var wire 32 m din [31:0] $end
$var wire 1 n en $end
$var wire 32 o in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 p dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 q din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 r dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module opA_ff $end
$var wire 1 0 clk $end
$var wire 32 s din [31:0] $end
$var wire 1 F en $end
$var wire 1 2 rst_l $end
$var wire 32 t in [31:0] $end
$var wire 32 u dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 v din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 w dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module opB_ff $end
$var wire 1 0 clk $end
$var wire 32 x din [31:0] $end
$var wire 1 G en $end
$var wire 1 2 rst_l $end
$var wire 32 y in [31:0] $end
$var wire 32 z dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 { din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 | dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module result_ff $end
$var wire 1 0 clk $end
$var wire 32 } din [31:0] $end
$var wire 1 H en $end
$var wire 1 2 rst_l $end
$var wire 32 ~ in [31:0] $end
$var wire 32 !" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 "" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 #" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w11_ff $end
$var wire 1 0 clk $end
$var wire 32 $" din [31:0] $end
$var wire 1 %" en $end
$var wire 32 &" in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 '" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 (" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 )" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w12_ff $end
$var wire 1 0 clk $end
$var wire 32 *" din [31:0] $end
$var wire 1 +" en $end
$var wire 32 ," in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 -" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 ." din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 /" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w21_ff $end
$var wire 1 0 clk $end
$var wire 32 0" din [31:0] $end
$var wire 1 1" en $end
$var wire 32 2" in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 3" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 4" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 5" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w22_ff $end
$var wire 1 0 clk $end
$var wire 32 6" din [31:0] $end
$var wire 1 7" en $end
$var wire 32 8" in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 9" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 :" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 ;" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w31_ff $end
$var wire 1 0 clk $end
$var wire 32 <" din [31:0] $end
$var wire 1 =" en $end
$var wire 32 >" in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 ?" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 @" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 A" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module w32_ff $end
$var wire 1 0 clk $end
$var wire 32 B" din [31:0] $end
$var wire 1 C" en $end
$var wire 32 D" in [31:0] $end
$var wire 1 2 rst_l $end
$var wire 32 E" dout [31:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 0 clk $end
$var wire 32 F" din [31:0] $end
$var wire 1 2 rst_l $end
$var reg 32 G" dout [31:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 G"
b1000000100000000000000000000000 F"
b0 E"
b1000000100000000000000000000000 D"
1C"
b1000000100000000000000000000000 B"
b0 A"
b1000000100000000000000000000000 @"
b0 ?"
b1000000100000000000000000000000 >"
1="
b1000000100000000000000000000000 <"
b0 ;"
b11000000100000000000000000000000 :"
b0 9"
b11000000100000000000000000000000 8"
17"
b11000000100000000000000000000000 6"
b0 5"
b11000000100000000000000000000000 4"
b0 3"
b11000000100000000000000000000000 2"
11"
b11000000100000000000000000000000 0"
b0 /"
b1000000100000000000000000000000 ."
b0 -"
b1000000100000000000000000000000 ,"
1+"
b1000000100000000000000000000000 *"
b0 )"
b1000000100000000000000000000000 ("
b0 '"
b1000000100000000000000000000000 &"
1%"
b1000000100000000000000000000000 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b11000000110000000000000000000000 q
b0 p
b11000000110000000000000000000000 o
1n
b11000000110000000000000000000000 m
b0 l
b1000000110000000000000000000000 k
b0 j
b1000000110000000000000000000000 i
1h
b1000000110000000000000000000000 g
b0 f
b11000000000000000000000000000000 e
b0 d
b11000000000000000000000000000000 c
1b
b11000000000000000000000000000000 a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
0H
0G
0F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
05
b0 4
b0 3
02
01
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
b0 !
$end
#5
10
#10
00
12
#15
b1000000100000000000000000000000 (
b1000000100000000000000000000000 =
b1000000100000000000000000000000 N
b1000000100000000000000000000000 '"
b1000000100000000000000000000000 )"
b1000000100000000000000000000000 '
b1000000100000000000000000000000 >
b1000000100000000000000000000000 M
b1000000100000000000000000000000 -"
b1000000100000000000000000000000 /"
b11000000100000000000000000000000 &
b11000000100000000000000000000000 ?
b11000000100000000000000000000000 L
b11000000100000000000000000000000 3"
b11000000100000000000000000000000 5"
b11000000100000000000000000000000 %
b11000000100000000000000000000000 @
b11000000100000000000000000000000 K
b11000000100000000000000000000000 9"
b11000000100000000000000000000000 ;"
b1000000100000000000000000000000 $
b1000000100000000000000000000000 A
b1000000100000000000000000000000 J
b1000000100000000000000000000000 ?"
b1000000100000000000000000000000 A"
b1000000100000000000000000000000 #
b1000000100000000000000000000000 B
b1000000100000000000000000000000 I
b1000000100000000000000000000000 E"
b1000000100000000000000000000000 G"
b11000000000000000000000000000000 .
b11000000000000000000000000000000 7
b11000000000000000000000000000000 T
b11000000000000000000000000000000 d
b11000000000000000000000000000000 f
b1000000110000000000000000000000 -
b1000000110000000000000000000000 8
b1000000110000000000000000000000 S
b1000000110000000000000000000000 j
b1000000110000000000000000000000 l
b11000000110000000000000000000000 ,
b11000000110000000000000000000000 9
b11000000110000000000000000000000 R
b11000000110000000000000000000000 p
b11000000110000000000000000000000 r
10
#20
1"
b10010001101000101011001111000 t
b10010001101000101011001111000 v
1F
00
15
b10010001101000101011001111000 :
b10010001101000101011001111000 s
b10010001101000101011001111000 ;
b10010001101000101011001111000 x
b10010001101000101011001111000 4
b10010001101000101011001111000 D
1`
b110000000000000000000000000000 3
b110000000000000000000000000000 C
#25
b10010001101000101011001111000 !
b10010001101000101011001111000 E
b10010001101000101011001111000 *
b10010001101000101011001111000 P
b10010001101000101011001111000 u
b10010001101000101011001111000 w
10
#30
0F
00
05
#35
10
#40
b0 !
b0 E
b10000111011001010100001100100001 y
b10000111011001010100001100100001 {
1G
00
15
b10000111011001010100001100100001 :
b10000111011001010100001100100001 s
b10000111011001010100001100100001 ;
b10000111011001010100001100100001 x
b10000111011001010100001100100001 4
b10000111011001010100001100100001 D
0`
1_
b110000000000000000000000000100 3
b110000000000000000000000000100 C
#45
b10000111011001010100001100100001 !
b10000111011001010100001100100001 E
b10000111011001010100001100100001 )
b10000111011001010100001100100001 O
b10000111011001010100001100100001 z
b10000111011001010100001100100001 |
10
#50
0G
00
05
#55
10
#60
00
#65
10
#70
00
b11011110101011011011111011101111 <
b11011110101011011011111011101111 }
b11011110101011011011111011101111 /
b11011110101011011011111011101111 6
#75
10
#80
b11011110101011011011111011101111 ~
b11011110101011011011111011101111 ""
00
1H
11
#85
b11011110101011011011111011101111 +
b11011110101011011011111011101111 Q
b11011110101011011011111011101111 !"
b11011110101011011011111011101111 #"
10
#90
00
0H
01
#95
10
#100
00
#105
10
#110
b10010001101000101011001111000 !
b10010001101000101011001111000 E
00
1`
0_
b110000000000000000000000000000 3
b110000000000000000000000000000 C
#115
10
#120
b10000111011001010100001100100001 !
b10000111011001010100001100100001 E
00
0`
1_
b110000000000000000000000000100 3
b110000000000000000000000000100 C
#125
10
#130
b11011110101011011011111011101111 !
b11011110101011011011111011101111 E
00
0_
1[
b110000000000000000000000110000 3
b110000000000000000000000110000 C
#135
10
#140
00
