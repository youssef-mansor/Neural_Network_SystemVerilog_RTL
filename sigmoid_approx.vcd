$date
	Thu Dec 26 12:22:13 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module sigmoid_approx $end
$var wire 1 ! clk $end
$var wire 5 " exceptions [4:0] $end
$var wire 32 # half_val [31:0] $end
$var wire 32 $ in_x [31:0] $end
$var wire 32 % one_val [31:0] $end
$var wire 3 & round_mode [2:0] $end
$var wire 1 ' rst_l $end
$var wire 5 ( sub_exceptions_2 [4:0] $end
$var wire 32 ) term1 [31:0] $end
$var wire 32 * term2 [31:0] $end
$var wire 32 + x_neg [31:0] $end
$var wire 1 , x_is_negative $end
$var wire 32 - x_div_one_plus_x [31:0] $end
$var wire 32 . x_div_one_minus_x [31:0] $end
$var wire 5 / sub_exceptions_1 [4:0] $end
$var wire 32 0 out_sigmoid [31:0] $end
$var wire 32 1 one_plus_x [31:0] $end
$var wire 32 2 one_minus_x [31:0] $end
$var wire 5 3 mul_exceptions_2 [4:0] $end
$var wire 5 4 mul_exceptions_1 [4:0] $end
$var wire 5 5 div_exceptions_2 [4:0] $end
$var wire 5 6 div_exceptions_1 [4:0] $end
$var wire 5 7 add_exceptions [4:0] $end
$scope module add_sub_inst1 $end
$var wire 1 8 cout_check $end
$var wire 1 9 divide_by_zero $end
$var wire 32 : in_x [31:0] $end
$var wire 32 ; in_y [31:0] $end
$var wire 1 < inexact $end
$var wire 1 = invalid_operation $end
$var wire 32 > of_result [31:0] $end
$var wire 1 , operation $end
$var wire 1 ? operator_y $end
$var wire 1 @ overflow $end
$var wire 3 A round_mode [2:0] $end
$var wire 1 B subtract $end
$var wire 1 C underflow $end
$var wire 1 D x_is_inf $end
$var wire 1 E x_is_zero $end
$var wire 1 F y_is_inf $end
$var wire 1 G y_is_zero $end
$var wire 1 H y_is_sNaN $end
$var wire 1 I y_is_qNaN $end
$var wire 10 J y_check_res [9:0] $end
$var wire 1 K x_is_sNaN $end
$var wire 1 L x_is_qNaN $end
$var wire 10 M x_check_res [9:0] $end
$var wire 8 N subnorm_exp [7:0] $end
$var wire 1 O sign_z $end
$var wire 1 P sign_y $end
$var wire 1 Q sign_x $end
$var wire 8 R shft_amt [7:0] $end
$var wire 27 S rt_shift_mant [26:0] $end
$var wire 24 T rounded_mant [23:0] $end
$var wire 1 U round_of $end
$var wire 32 V out_z [31:0] $end
$var wire 27 W norm_sum [26:0] $end
$var wire 8 X norm_exp [7:0] $end
$var wire 23 Y mant_z [22:0] $end
$var wire 23 Z mant_y [22:0] $end
$var wire 23 [ mant_x [22:0] $end
$var wire 27 \ mant_sum [26:0] $end
$var wire 23 ] mant_b [22:0] $end
$var wire 23 ^ mant_a [22:0] $end
$var wire 27 _ lt_shft_mant [26:0] $end
$var wire 5 ` ld_zero_cnt [4:0] $end
$var wire 8 a inter_shft_amt [7:0] $end
$var wire 32 b inter_result [31:0] $end
$var wire 5 c inc_dec_exp_amt [4:0] $end
$var wire 1 d hd_bit_b $end
$var wire 1 e hd_bit_a $end
$var wire 8 f exp_z [7:0] $end
$var wire 8 g exp_y [7:0] $end
$var wire 8 h exp_x [7:0] $end
$var wire 1 i exp_shft_comp $end
$var wire 8 j exp_diff [7:0] $end
$var wire 8 k exp_b [7:0] $end
$var wire 8 l exp_a [7:0] $end
$var wire 5 m exceptions [4:0] $end
$var wire 1 n cout $end
$var wire 1 o comp $end
$var wire 1 p b_is_subnorm $end
$var wire 27 q arg2 [26:0] $end
$var wire 27 r arg1 [26:0] $end
$var wire 1 s a_is_subnorm $end
$scope module add_sub_rounder $end
$var wire 27 t mantisa [26:0] $end
$var wire 3 u round_mode [2:0] $end
$var wire 24 v rounded_mantisa [23:0] $end
$var wire 1 U rounding_overflow $end
$var wire 1 O sign $end
$var wire 1 w rup_overflow $end
$var wire 24 x rup [23:0] $end
$var wire 1 y rtz_overflow $end
$var wire 24 z rtz [23:0] $end
$var wire 1 { rne_overflow $end
$var wire 24 | rne [23:0] $end
$var wire 1 } rmm_overflow $end
$var wire 24 ~ rmm [23:0] $end
$var wire 1 !" rdn_overflow $end
$var wire 24 "" rdn [23:0] $end
$upscope $end
$scope module check_x $end
$var wire 32 #" in [31:0] $end
$var wire 1 $" is_neg_inf $end
$var wire 1 %" is_neg_subnorm $end
$var wire 1 &" is_neg_zero $end
$var wire 1 '" is_pos_inf $end
$var wire 1 (" is_pos_subnorm $end
$var wire 1 )" is_pos_zero $end
$var wire 1 *" is_qNaN $end
$var wire 1 +" is_sNaN $end
$var wire 1 ," sign $end
$var wire 1 -" sig_zero $end
$var wire 23 ." sig [22:0] $end
$var wire 10 /" result [9:0] $end
$var wire 1 0" is_pos_norm $end
$var wire 1 1" is_neg_norm $end
$var wire 1 2" exp_zero $end
$var wire 1 3" exp_one $end
$var wire 8 4" exp [7:0] $end
$upscope $end
$scope module check_y $end
$var wire 32 5" in [31:0] $end
$var wire 1 6" is_neg_inf $end
$var wire 1 7" is_neg_subnorm $end
$var wire 1 8" is_neg_zero $end
$var wire 1 9" is_pos_inf $end
$var wire 1 :" is_pos_subnorm $end
$var wire 1 ;" is_pos_zero $end
$var wire 1 <" is_qNaN $end
$var wire 1 =" is_sNaN $end
$var wire 1 >" sign $end
$var wire 1 ?" sig_zero $end
$var wire 23 @" sig [22:0] $end
$var wire 10 A" result [9:0] $end
$var wire 1 B" is_pos_norm $end
$var wire 1 C" is_neg_norm $end
$var wire 1 D" exp_zero $end
$var wire 1 E" exp_one $end
$var wire 8 F" exp [7:0] $end
$upscope $end
$scope module exp_equalizer $end
$var wire 27 G" mantisa [26:0] $end
$var wire 27 H" out [26:0] $end
$var wire 8 I" shift_amount [7:0] $end
$upscope $end
$scope module norm_dist_checker $end
$var wire 24 J" in [23:0] $end
$var wire 5 K" out [4:0] $end
$upscope $end
$scope module norm_shifter $end
$var wire 27 L" mantisa [26:0] $end
$var wire 8 M" shift_amount [7:0] $end
$var wire 27 N" temp [26:0] $end
$var wire 27 O" out [26:0] $end
$upscope $end
$upscope $end
$scope module add_sub_inst2 $end
$var wire 1 P" cout_check $end
$var wire 1 Q" divide_by_zero $end
$var wire 32 R" in_x [31:0] $end
$var wire 32 S" in_y [31:0] $end
$var wire 1 T" inexact $end
$var wire 1 U" invalid_operation $end
$var wire 32 V" of_result [31:0] $end
$var wire 1 W" operation $end
$var wire 1 X" operator_y $end
$var wire 1 Y" overflow $end
$var wire 3 Z" round_mode [2:0] $end
$var wire 1 [" subtract $end
$var wire 1 \" underflow $end
$var wire 1 ]" x_is_inf $end
$var wire 1 ^" x_is_zero $end
$var wire 1 _" y_is_inf $end
$var wire 1 `" y_is_zero $end
$var wire 1 a" y_is_sNaN $end
$var wire 1 b" y_is_qNaN $end
$var wire 10 c" y_check_res [9:0] $end
$var wire 1 d" x_is_sNaN $end
$var wire 1 e" x_is_qNaN $end
$var wire 10 f" x_check_res [9:0] $end
$var wire 8 g" subnorm_exp [7:0] $end
$var wire 1 h" sign_z $end
$var wire 1 i" sign_y $end
$var wire 1 j" sign_x $end
$var wire 8 k" shft_amt [7:0] $end
$var wire 27 l" rt_shift_mant [26:0] $end
$var wire 24 m" rounded_mant [23:0] $end
$var wire 1 n" round_of $end
$var wire 32 o" out_z [31:0] $end
$var wire 27 p" norm_sum [26:0] $end
$var wire 8 q" norm_exp [7:0] $end
$var wire 23 r" mant_z [22:0] $end
$var wire 23 s" mant_y [22:0] $end
$var wire 23 t" mant_x [22:0] $end
$var wire 27 u" mant_sum [26:0] $end
$var wire 23 v" mant_b [22:0] $end
$var wire 23 w" mant_a [22:0] $end
$var wire 27 x" lt_shft_mant [26:0] $end
$var wire 5 y" ld_zero_cnt [4:0] $end
$var wire 8 z" inter_shft_amt [7:0] $end
$var wire 32 {" inter_result [31:0] $end
$var wire 5 |" inc_dec_exp_amt [4:0] $end
$var wire 1 }" hd_bit_b $end
$var wire 1 ~" hd_bit_a $end
$var wire 8 !# exp_z [7:0] $end
$var wire 8 "# exp_y [7:0] $end
$var wire 8 ## exp_x [7:0] $end
$var wire 1 $# exp_shft_comp $end
$var wire 8 %# exp_diff [7:0] $end
$var wire 8 &# exp_b [7:0] $end
$var wire 8 '# exp_a [7:0] $end
$var wire 5 (# exceptions [4:0] $end
$var wire 1 )# cout $end
$var wire 1 *# comp $end
$var wire 1 +# b_is_subnorm $end
$var wire 27 ,# arg2 [26:0] $end
$var wire 27 -# arg1 [26:0] $end
$var wire 1 .# a_is_subnorm $end
$scope module add_sub_rounder $end
$var wire 27 /# mantisa [26:0] $end
$var wire 3 0# round_mode [2:0] $end
$var wire 24 1# rounded_mantisa [23:0] $end
$var wire 1 n" rounding_overflow $end
$var wire 1 h" sign $end
$var wire 1 2# rup_overflow $end
$var wire 24 3# rup [23:0] $end
$var wire 1 4# rtz_overflow $end
$var wire 24 5# rtz [23:0] $end
$var wire 1 6# rne_overflow $end
$var wire 24 7# rne [23:0] $end
$var wire 1 8# rmm_overflow $end
$var wire 24 9# rmm [23:0] $end
$var wire 1 :# rdn_overflow $end
$var wire 24 ;# rdn [23:0] $end
$upscope $end
$scope module check_x $end
$var wire 32 <# in [31:0] $end
$var wire 1 =# is_neg_inf $end
$var wire 1 ># is_neg_subnorm $end
$var wire 1 ?# is_neg_zero $end
$var wire 1 @# is_pos_inf $end
$var wire 1 A# is_pos_subnorm $end
$var wire 1 B# is_pos_zero $end
$var wire 1 C# is_qNaN $end
$var wire 1 D# is_sNaN $end
$var wire 1 E# sign $end
$var wire 1 F# sig_zero $end
$var wire 23 G# sig [22:0] $end
$var wire 10 H# result [9:0] $end
$var wire 1 I# is_pos_norm $end
$var wire 1 J# is_neg_norm $end
$var wire 1 K# exp_zero $end
$var wire 1 L# exp_one $end
$var wire 8 M# exp [7:0] $end
$upscope $end
$scope module check_y $end
$var wire 32 N# in [31:0] $end
$var wire 1 O# is_neg_inf $end
$var wire 1 P# is_neg_subnorm $end
$var wire 1 Q# is_neg_zero $end
$var wire 1 R# is_pos_inf $end
$var wire 1 S# is_pos_subnorm $end
$var wire 1 T# is_pos_zero $end
$var wire 1 U# is_qNaN $end
$var wire 1 V# is_sNaN $end
$var wire 1 W# sign $end
$var wire 1 X# sig_zero $end
$var wire 23 Y# sig [22:0] $end
$var wire 10 Z# result [9:0] $end
$var wire 1 [# is_pos_norm $end
$var wire 1 \# is_neg_norm $end
$var wire 1 ]# exp_zero $end
$var wire 1 ^# exp_one $end
$var wire 8 _# exp [7:0] $end
$upscope $end
$scope module exp_equalizer $end
$var wire 27 `# mantisa [26:0] $end
$var wire 27 a# out [26:0] $end
$var wire 8 b# shift_amount [7:0] $end
$upscope $end
$scope module norm_dist_checker $end
$var wire 24 c# in [23:0] $end
$var wire 5 d# out [4:0] $end
$upscope $end
$scope module norm_shifter $end
$var wire 27 e# mantisa [26:0] $end
$var wire 8 f# shift_amount [7:0] $end
$var wire 27 g# temp [26:0] $end
$var wire 27 h# out [26:0] $end
$upscope $end
$upscope $end
$scope module add_sub_inst3 $end
$var wire 1 i# cout_check $end
$var wire 1 j# divide_by_zero $end
$var wire 5 k# exceptions [4:0] $end
$var wire 32 l# in_x [31:0] $end
$var wire 1 m# inexact $end
$var wire 1 n# invalid_operation $end
$var wire 32 o# of_result [31:0] $end
$var wire 1 p# operation $end
$var wire 1 q# operator_y $end
$var wire 32 r# out_z [31:0] $end
$var wire 1 s# overflow $end
$var wire 3 t# round_mode [2:0] $end
$var wire 1 u# subtract $end
$var wire 1 v# underflow $end
$var wire 1 w# x_is_inf $end
$var wire 1 x# x_is_zero $end
$var wire 1 y# y_is_inf $end
$var wire 1 z# y_is_zero $end
$var wire 1 {# y_is_sNaN $end
$var wire 1 |# y_is_qNaN $end
$var wire 10 }# y_check_res [9:0] $end
$var wire 1 ~# x_is_sNaN $end
$var wire 1 !$ x_is_qNaN $end
$var wire 10 "$ x_check_res [9:0] $end
$var wire 8 #$ subnorm_exp [7:0] $end
$var wire 1 $$ sign_z $end
$var wire 1 %$ sign_y $end
$var wire 1 &$ sign_x $end
$var wire 8 '$ shft_amt [7:0] $end
$var wire 27 ($ rt_shift_mant [26:0] $end
$var wire 24 )$ rounded_mant [23:0] $end
$var wire 1 *$ round_of $end
$var wire 27 +$ norm_sum [26:0] $end
$var wire 8 ,$ norm_exp [7:0] $end
$var wire 23 -$ mant_z [22:0] $end
$var wire 23 .$ mant_y [22:0] $end
$var wire 23 /$ mant_x [22:0] $end
$var wire 27 0$ mant_sum [26:0] $end
$var wire 23 1$ mant_b [22:0] $end
$var wire 23 2$ mant_a [22:0] $end
$var wire 27 3$ lt_shft_mant [26:0] $end
$var wire 5 4$ ld_zero_cnt [4:0] $end
$var wire 8 5$ inter_shft_amt [7:0] $end
$var wire 32 6$ inter_result [31:0] $end
$var wire 5 7$ inc_dec_exp_amt [4:0] $end
$var wire 32 8$ in_y [31:0] $end
$var wire 1 9$ hd_bit_b $end
$var wire 1 :$ hd_bit_a $end
$var wire 8 ;$ exp_z [7:0] $end
$var wire 8 <$ exp_y [7:0] $end
$var wire 8 =$ exp_x [7:0] $end
$var wire 1 >$ exp_shft_comp $end
$var wire 8 ?$ exp_diff [7:0] $end
$var wire 8 @$ exp_b [7:0] $end
$var wire 8 A$ exp_a [7:0] $end
$var wire 1 B$ cout $end
$var wire 1 C$ comp $end
$var wire 1 D$ b_is_subnorm $end
$var wire 27 E$ arg2 [26:0] $end
$var wire 27 F$ arg1 [26:0] $end
$var wire 1 G$ a_is_subnorm $end
$scope module add_sub_rounder $end
$var wire 27 H$ mantisa [26:0] $end
$var wire 3 I$ round_mode [2:0] $end
$var wire 24 J$ rounded_mantisa [23:0] $end
$var wire 1 *$ rounding_overflow $end
$var wire 1 $$ sign $end
$var wire 1 K$ rup_overflow $end
$var wire 24 L$ rup [23:0] $end
$var wire 1 M$ rtz_overflow $end
$var wire 24 N$ rtz [23:0] $end
$var wire 1 O$ rne_overflow $end
$var wire 24 P$ rne [23:0] $end
$var wire 1 Q$ rmm_overflow $end
$var wire 24 R$ rmm [23:0] $end
$var wire 1 S$ rdn_overflow $end
$var wire 24 T$ rdn [23:0] $end
$upscope $end
$scope module check_x $end
$var wire 32 U$ in [31:0] $end
$var wire 1 V$ is_neg_inf $end
$var wire 1 W$ is_neg_subnorm $end
$var wire 1 X$ is_neg_zero $end
$var wire 1 Y$ is_pos_inf $end
$var wire 1 Z$ is_pos_subnorm $end
$var wire 1 [$ is_pos_zero $end
$var wire 1 \$ is_qNaN $end
$var wire 1 ]$ is_sNaN $end
$var wire 1 ^$ sign $end
$var wire 1 _$ sig_zero $end
$var wire 23 `$ sig [22:0] $end
$var wire 10 a$ result [9:0] $end
$var wire 1 b$ is_pos_norm $end
$var wire 1 c$ is_neg_norm $end
$var wire 1 d$ exp_zero $end
$var wire 1 e$ exp_one $end
$var wire 8 f$ exp [7:0] $end
$upscope $end
$scope module check_y $end
$var wire 1 g$ is_neg_inf $end
$var wire 1 h$ is_neg_subnorm $end
$var wire 1 i$ is_neg_zero $end
$var wire 1 j$ is_pos_inf $end
$var wire 1 k$ is_pos_subnorm $end
$var wire 1 l$ is_pos_zero $end
$var wire 1 m$ is_qNaN $end
$var wire 1 n$ is_sNaN $end
$var wire 1 o$ sign $end
$var wire 1 p$ sig_zero $end
$var wire 23 q$ sig [22:0] $end
$var wire 10 r$ result [9:0] $end
$var wire 1 s$ is_pos_norm $end
$var wire 1 t$ is_neg_norm $end
$var wire 32 u$ in [31:0] $end
$var wire 1 v$ exp_zero $end
$var wire 1 w$ exp_one $end
$var wire 8 x$ exp [7:0] $end
$upscope $end
$scope module exp_equalizer $end
$var wire 27 y$ mantisa [26:0] $end
$var wire 27 z$ out [26:0] $end
$var wire 8 {$ shift_amount [7:0] $end
$upscope $end
$scope module norm_dist_checker $end
$var wire 24 |$ in [23:0] $end
$var wire 5 }$ out [4:0] $end
$upscope $end
$scope module norm_shifter $end
$var wire 27 ~$ mantisa [26:0] $end
$var wire 8 !% shift_amount [7:0] $end
$var wire 27 "% temp [26:0] $end
$var wire 27 #% out [26:0] $end
$upscope $end
$upscope $end
$scope module add_sub_inst4 $end
$var wire 1 $% cout_check $end
$var wire 1 %% divide_by_zero $end
$var wire 5 &% exceptions [4:0] $end
$var wire 32 '% in_x [31:0] $end
$var wire 1 (% inexact $end
$var wire 1 )% invalid_operation $end
$var wire 32 *% of_result [31:0] $end
$var wire 1 +% operation $end
$var wire 1 ,% operator_y $end
$var wire 32 -% out_z [31:0] $end
$var wire 1 .% overflow $end
$var wire 3 /% round_mode [2:0] $end
$var wire 1 0% subtract $end
$var wire 1 1% underflow $end
$var wire 1 2% x_is_inf $end
$var wire 1 3% x_is_zero $end
$var wire 1 4% y_is_inf $end
$var wire 1 5% y_is_zero $end
$var wire 1 6% y_is_sNaN $end
$var wire 1 7% y_is_qNaN $end
$var wire 10 8% y_check_res [9:0] $end
$var wire 1 9% x_is_sNaN $end
$var wire 1 :% x_is_qNaN $end
$var wire 10 ;% x_check_res [9:0] $end
$var wire 8 <% subnorm_exp [7:0] $end
$var wire 1 =% sign_z $end
$var wire 1 >% sign_y $end
$var wire 1 ?% sign_x $end
$var wire 8 @% shft_amt [7:0] $end
$var wire 27 A% rt_shift_mant [26:0] $end
$var wire 24 B% rounded_mant [23:0] $end
$var wire 1 C% round_of $end
$var wire 27 D% norm_sum [26:0] $end
$var wire 8 E% norm_exp [7:0] $end
$var wire 23 F% mant_z [22:0] $end
$var wire 23 G% mant_y [22:0] $end
$var wire 23 H% mant_x [22:0] $end
$var wire 27 I% mant_sum [26:0] $end
$var wire 23 J% mant_b [22:0] $end
$var wire 23 K% mant_a [22:0] $end
$var wire 27 L% lt_shft_mant [26:0] $end
$var wire 5 M% ld_zero_cnt [4:0] $end
$var wire 8 N% inter_shft_amt [7:0] $end
$var wire 32 O% inter_result [31:0] $end
$var wire 5 P% inc_dec_exp_amt [4:0] $end
$var wire 32 Q% in_y [31:0] $end
$var wire 1 R% hd_bit_b $end
$var wire 1 S% hd_bit_a $end
$var wire 8 T% exp_z [7:0] $end
$var wire 8 U% exp_y [7:0] $end
$var wire 8 V% exp_x [7:0] $end
$var wire 1 W% exp_shft_comp $end
$var wire 8 X% exp_diff [7:0] $end
$var wire 8 Y% exp_b [7:0] $end
$var wire 8 Z% exp_a [7:0] $end
$var wire 1 [% cout $end
$var wire 1 \% comp $end
$var wire 1 ]% b_is_subnorm $end
$var wire 27 ^% arg2 [26:0] $end
$var wire 27 _% arg1 [26:0] $end
$var wire 1 `% a_is_subnorm $end
$scope module add_sub_rounder $end
$var wire 27 a% mantisa [26:0] $end
$var wire 3 b% round_mode [2:0] $end
$var wire 24 c% rounded_mantisa [23:0] $end
$var wire 1 C% rounding_overflow $end
$var wire 1 =% sign $end
$var wire 1 d% rup_overflow $end
$var wire 24 e% rup [23:0] $end
$var wire 1 f% rtz_overflow $end
$var wire 24 g% rtz [23:0] $end
$var wire 1 h% rne_overflow $end
$var wire 24 i% rne [23:0] $end
$var wire 1 j% rmm_overflow $end
$var wire 24 k% rmm [23:0] $end
$var wire 1 l% rdn_overflow $end
$var wire 24 m% rdn [23:0] $end
$upscope $end
$scope module check_x $end
$var wire 32 n% in [31:0] $end
$var wire 1 o% is_neg_inf $end
$var wire 1 p% is_neg_subnorm $end
$var wire 1 q% is_neg_zero $end
$var wire 1 r% is_pos_inf $end
$var wire 1 s% is_pos_subnorm $end
$var wire 1 t% is_pos_zero $end
$var wire 1 u% is_qNaN $end
$var wire 1 v% is_sNaN $end
$var wire 1 w% sign $end
$var wire 1 x% sig_zero $end
$var wire 23 y% sig [22:0] $end
$var wire 10 z% result [9:0] $end
$var wire 1 {% is_pos_norm $end
$var wire 1 |% is_neg_norm $end
$var wire 1 }% exp_zero $end
$var wire 1 ~% exp_one $end
$var wire 8 !& exp [7:0] $end
$upscope $end
$scope module check_y $end
$var wire 1 "& is_neg_inf $end
$var wire 1 #& is_neg_subnorm $end
$var wire 1 $& is_neg_zero $end
$var wire 1 %& is_pos_inf $end
$var wire 1 && is_pos_subnorm $end
$var wire 1 '& is_pos_zero $end
$var wire 1 (& is_qNaN $end
$var wire 1 )& is_sNaN $end
$var wire 1 *& sign $end
$var wire 1 +& sig_zero $end
$var wire 23 ,& sig [22:0] $end
$var wire 10 -& result [9:0] $end
$var wire 1 .& is_pos_norm $end
$var wire 1 /& is_neg_norm $end
$var wire 32 0& in [31:0] $end
$var wire 1 1& exp_zero $end
$var wire 1 2& exp_one $end
$var wire 8 3& exp [7:0] $end
$upscope $end
$scope module exp_equalizer $end
$var wire 27 4& mantisa [26:0] $end
$var wire 27 5& out [26:0] $end
$var wire 8 6& shift_amount [7:0] $end
$upscope $end
$scope module norm_dist_checker $end
$var wire 24 7& in [23:0] $end
$var wire 5 8& out [4:0] $end
$upscope $end
$scope module norm_shifter $end
$var wire 27 9& mantisa [26:0] $end
$var wire 8 :& shift_amount [7:0] $end
$var wire 27 ;& temp [26:0] $end
$var wire 27 <& out [26:0] $end
$upscope $end
$upscope $end
$scope module div_inst1 $end
$var wire 32 =& a [31:0] $end
$var wire 32 >& b [31:0] $end
$var wire 1 ?& cancel $end
$var wire 1 @& cancel_reset $end
$var wire 1 ! clk $end
$var wire 1 A& entering $end
$var wire 1 B& entering_norm_case $end
$var wire 1 C& in_valid $end
$var wire 1 D& infinite_excep $end
$var wire 1 E& invalid_excep $end
$var wire 1 F& is_out_NaN $end
$var wire 1 G& is_out_inf $end
$var wire 1 H& is_out_zero $end
$var wire 1 I& is_res_NaN $end
$var wire 1 J& is_res_inf $end
$var wire 1 K& is_res_zero $end
$var wire 1 L& major_excep $end
$var wire 26 M& mantx_z_in [25:0] $end
$var wire 1 N& norm_case $end
$var wire 1 O& not_sNaN_invalid_exc $end
$var wire 10 P& out_sexp [9:0] $end
$var wire 1 Q& out_sign $end
$var wire 27 R& rem [26:0] $end
$var wire 3 S& round_mode [2:0] $end
$var wire 3 T& roundingModeOut [2:0] $end
$var wire 1 ' rst_l $end
$var wire 1 U& sign_res $end
$var wire 1 V& skipCycle2 $end
$var wire 1 W& spec_case_a $end
$var wire 1 X& spec_case_b $end
$var wire 26 Y& trail_term [25:0] $end
$var wire 28 Z& trail_rem [27:0] $end
$var wire 1 [& sign_z $end
$var wire 1 \& sign_b $end
$var wire 1 ]& sign_a $end
$var wire 10 ^& sexp_z [9:0] $end
$var wire 11 _& sexp_quot [10:0] $end
$var wire 10 `& sexp_b [9:0] $end
$var wire 10 a& sexp_a [9:0] $end
$var wire 10 b& s_sat_exp_quot [9:0] $end
$var wire 3 c& round_mode_z [2:0] $end
$var wire 26 d& rem_z_in [25:0] $end
$var wire 26 e& rem_z [25:0] $end
$var wire 1 f& out_valid $end
$var wire 27 g& out_mant [26:0] $end
$var wire 32 h& out [31:0] $end
$var wire 33 i& oper2 [32:0] $end
$var wire 33 j& oper1 [32:0] $end
$var wire 1 k& not_zero_rem_z $end
$var wire 1 l& new_bit $end
$var wire 26 m& mantx_z [25:0] $end
$var wire 23 n& mant_b_z [22:0] $end
$var wire 25 o& mant_b [24:0] $end
$var wire 25 p& mant_a [24:0] $end
$var wire 1 q& major_exc_z $end
$var wire 1 r& is_zero_z $end
$var wire 1 s& is_inf_z $end
$var wire 1 t& is_b_zero $end
$var wire 1 u& is_b_sNaN $end
$var wire 1 v& is_b_qNaN $end
$var wire 1 w& is_b_inf $end
$var wire 1 x& is_a_zero $end
$var wire 1 y& is_a_sNaN $end
$var wire 1 z& is_a_qNaN $end
$var wire 1 {& is_a_inf $end
$var wire 1 |& is_NaN_z $end
$var wire 1 }& in_ready $end
$var wire 1 ~& idle $end
$var wire 5 !' exceptions [4:0] $end
$var wire 2 "' dec_hi_mant_a [1:0] $end
$var wire 5 #' cycle_num_in [4:0] $end
$var wire 5 $' cycle_num [4:0] $end
$var wire 25 %' bit_mask [24:0] $end
$scope function clog2 $end
$var integer 32 &' a [31:0] $end
$upscope $end
$scope module cycle_num_ff $end
$var wire 1 ! clk $end
$var wire 5 '' din [4:0] $end
$var wire 1 (' en $end
$var wire 1 @& rst_l $end
$var wire 5 )' in [4:0] $end
$var wire 5 *' dout [4:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 5 +' din [4:0] $end
$var wire 1 @& rst_l $end
$var reg 5 ,' dout [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module exp_a $end
$var wire 32 -' in [31:0] $end
$var wire 1 .' is_zero $end
$var wire 1 /' sign $end
$var wire 23 0' sbnorm_mant [22:0] $end
$var wire 33 1' out [32:0] $end
$var wire 5 2' norm_dist [4:0] $end
$var wire 1 3' mant_in_zero $end
$var wire 23 4' mant_in [22:0] $end
$var wire 1 5' is_special $end
$var wire 1 6' exp_in_zero $end
$var wire 8 7' exp_in [7:0] $end
$var wire 9 8' exp_adjusted [8:0] $end
$var wire 9 9' exp [8:0] $end
$scope function clog2 $end
$var integer 32 :' a [31:0] $end
$upscope $end
$scope module countLeadingZeros $end
$var wire 23 ;' in [22:0] $end
$var wire 24 <' one_least_reverse_in [23:0] $end
$var wire 23 =' reverse_in [22:0] $end
$var wire 5 >' count [4:0] $end
$scope begin bt[0] $end
$var wire 5 ?' count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 @' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 A' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 B' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 C' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 D' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 E' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 F' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 G' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 H' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 I' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 J' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 K' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 L' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 M' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 N' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 O' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 P' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 Q' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 R' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 S' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 T' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 U' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 V' count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 W' in [22:0] $end
$var wire 23 X' out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module exp_b $end
$var wire 32 Y' in [31:0] $end
$var wire 1 Z' is_zero $end
$var wire 1 [' sign $end
$var wire 23 \' sbnorm_mant [22:0] $end
$var wire 33 ]' out [32:0] $end
$var wire 5 ^' norm_dist [4:0] $end
$var wire 1 _' mant_in_zero $end
$var wire 23 `' mant_in [22:0] $end
$var wire 1 a' is_special $end
$var wire 1 b' exp_in_zero $end
$var wire 8 c' exp_in [7:0] $end
$var wire 9 d' exp_adjusted [8:0] $end
$var wire 9 e' exp [8:0] $end
$scope function clog2 $end
$var integer 32 f' a [31:0] $end
$upscope $end
$scope module countLeadingZeros $end
$var wire 23 g' in [22:0] $end
$var wire 24 h' one_least_reverse_in [23:0] $end
$var wire 23 i' reverse_in [22:0] $end
$var wire 5 j' count [4:0] $end
$scope begin bt[0] $end
$var wire 5 k' count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 l' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 m' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 n' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 o' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 p' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 q' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 r' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 s' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 t' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 u' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 v' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 w' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 x' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 y' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 z' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 {' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 |' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 }' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 ~' count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 !( count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 "( count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 #( count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 $( count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 %( in [22:0] $end
$var wire 23 &( out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_NaN_z_ff $end
$var wire 1 ! clk $end
$var wire 1 I& din $end
$var wire 1 A& en $end
$var wire 1 @& rst_l $end
$var wire 1 '( in $end
$var wire 1 |& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 '( din $end
$var wire 1 @& rst_l $end
$var reg 1 |& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_inf_z_ff $end
$var wire 1 ! clk $end
$var wire 1 J& din $end
$var wire 1 A& en $end
$var wire 1 @& rst_l $end
$var wire 1 (( in $end
$var wire 1 s& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 (( din $end
$var wire 1 @& rst_l $end
$var reg 1 s& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_zero_z_ff $end
$var wire 1 ! clk $end
$var wire 1 K& din $end
$var wire 1 A& en $end
$var wire 1 @& rst_l $end
$var wire 1 )( in $end
$var wire 1 r& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 )( din $end
$var wire 1 @& rst_l $end
$var reg 1 r& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_a $end
$var wire 33 *( in [32:0] $end
$var wire 1 {& is_inf $end
$var wire 1 z& is_qNaN $end
$var wire 1 y& is_sNaN $end
$var wire 1 ]& sign $end
$var wire 25 +( sig [24:0] $end
$var wire 10 ,( s_exp [9:0] $end
$var wire 23 -( mant [22:0] $end
$var wire 1 x& is_zero $end
$var wire 1 .( is_ssNaN $end
$var wire 1 /( is_spec $end
$var wire 9 0( exp [8:0] $end
$upscope $end
$scope module mac_spec_check_b $end
$var wire 33 1( in [32:0] $end
$var wire 1 w& is_inf $end
$var wire 1 v& is_qNaN $end
$var wire 1 u& is_sNaN $end
$var wire 1 \& sign $end
$var wire 25 2( sig [24:0] $end
$var wire 10 3( s_exp [9:0] $end
$var wire 23 4( mant [22:0] $end
$var wire 1 t& is_zero $end
$var wire 1 5( is_ssNaN $end
$var wire 1 6( is_spec $end
$var wire 9 7( exp [8:0] $end
$upscope $end
$scope module major_exc_z_ff $end
$var wire 1 ! clk $end
$var wire 1 L& din $end
$var wire 1 A& en $end
$var wire 1 @& rst_l $end
$var wire 1 8( in $end
$var wire 1 q& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 8( din $end
$var wire 1 @& rst_l $end
$var reg 1 q& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mant_b_z_ff $end
$var wire 1 ! clk $end
$var wire 23 9( din [22:0] $end
$var wire 1 B& en $end
$var wire 1 @& rst_l $end
$var wire 23 :( in [22:0] $end
$var wire 23 ;( dout [22:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 23 <( din [22:0] $end
$var wire 1 @& rst_l $end
$var reg 23 =( dout [22:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mantx_z_ff $end
$var wire 1 ! clk $end
$var wire 26 >( din [25:0] $end
$var wire 1 ?( en $end
$var wire 1 @& rst_l $end
$var wire 26 @( in [25:0] $end
$var wire 26 A( dout [25:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 26 B( din [25:0] $end
$var wire 1 @& rst_l $end
$var reg 26 C( dout [25:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_zero_rem_z_ff $end
$var wire 1 ! clk $end
$var wire 1 D( din $end
$var wire 1 E( en $end
$var wire 1 @& rst_l $end
$var wire 1 F( in $end
$var wire 1 k& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 F( din $end
$var wire 1 @& rst_l $end
$var reg 1 k& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module rem_z_ff $end
$var wire 1 ! clk $end
$var wire 26 G( din [25:0] $end
$var wire 1 H( en $end
$var wire 1 @& rst_l $end
$var wire 26 I( in [25:0] $end
$var wire 26 J( dout [25:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 26 K( din [25:0] $end
$var wire 1 @& rst_l $end
$var reg 26 L( dout [25:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_exception $end
$var wire 27 M( adjusted_mant [26:0] $end
$var wire 1 N( common_case $end
$var wire 1 F& in_is_NaN $end
$var wire 1 G& in_is_inf $end
$var wire 1 H& in_is_zero $end
$var wire 27 O( in_mant [26:0] $end
$var wire 10 P( in_sexp [9:0] $end
$var wire 1 Q& in_sign $end
$var wire 1 Q( inexact $end
$var wire 1 D& infinite_excep $end
$var wire 1 E& invalid_excep $end
$var wire 1 R( is_out_NaN $end
$var wire 23 S( mant_out [22:0] $end
$var wire 1 T( notNaN_is_inf_out $end
$var wire 1 U( notNaN_is_special_inf_out $end
$var wire 1 V( overflow $end
$var wire 1 W( overflow_round_magup $end
$var wire 1 X( peg_max_finite_mag_out $end
$var wire 1 Y( peg_min_nonzero_mag_out $end
$var wire 1 Z( round_mag_up $end
$var wire 3 [( round_mode [2:0] $end
$var wire 1 \( underflow $end
$var wire 5 ]( subnorm_shift_dist [4:0] $end
$var wire 1 ^( sign_res $end
$var wire 1 _( sign_out $end
$var wire 10 `( s_exp [9:0] $end
$var wire 1 a( roundmode_near_even $end
$var wire 1 b( roundmode_min_mag $end
$var wire 1 c( roundmode_min $end
$var wire 1 d( roundmode_max_mag $end
$var wire 1 e( roundmode_max $end
$var wire 32 f( result [31:0] $end
$var wire 33 g( out [32:0] $end
$var wire 23 h( mant_res [22:0] $end
$var wire 25 i( mant [24:0] $end
$var wire 1 j( is_zero $end
$var wire 1 k( is_subnorm $end
$var wire 1 l( is_inf $end
$var wire 1 m( is_NaN $end
$var wire 8 n( exp_res [7:0] $end
$var wire 9 o( exp_out [8:0] $end
$var wire 5 p( exceptions [4:0] $end
$var wire 1 q( do_shift_mant_down1 $end
$var wire 1 r( common_underflow $end
$var wire 1 s( common_total_underflow $end
$var wire 1 t( common_overflow $end
$var wire 23 u( common_mant_out [22:0] $end
$var wire 1 v( common_inexact $end
$var wire 9 w( common_exp_out [8:0] $end
$var wire 10 x( adjusted_sexp [9:0] $end
$scope function clog2 $end
$var integer 32 y( a [31:0] $end
$upscope $end
$scope begin genblk2 $end
$var wire 1 z( any_round $end
$var wire 1 {( any_round_extra $end
$var wire 1 |( round_carry $end
$var wire 1 }( round_incr $end
$var wire 1 ~( round_pos_bit $end
$var wire 27 !) round_pos_mask [26:0] $end
$var wire 1 ") unbound_range_any_round $end
$var wire 1 #) unbound_range_round_incr $end
$var wire 1 $) unbound_range_round_posbit $end
$var wire 27 %) shifted_round_mask [26:0] $end
$var wire 11 &) sext_adjusted_exp [10:0] $end
$var wire 11 ') s_rounded_exp [10:0] $end
$var wire 26 () rounded_mant [25:0] $end
$var wire 27 )) roundMask [26:0] $end
$scope begin genblk4 $end
$var wire 25 *) roundMask_main [24:0] $end
$scope module lowmask_roundmask $end
$var wire 9 +) in [8:0] $end
$var wire 25 ,) reverse_out [24:0] $end
$var wire 25 -) out [24:0] $end
$var wire 513 .) c [512:0] $end
$scope module reverse_lo $end
$var wire 25 /) in [24:0] $end
$var wire 25 0) out [24:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$scope begin bt[23] $end
$upscope $end
$scope begin bt[24] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_out $end
$var wire 33 1) in [32:0] $end
$var wire 1 l( is_inf $end
$var wire 1 m( is_qNaN $end
$var wire 1 2) is_sNaN $end
$var wire 1 ^( sign $end
$var wire 25 3) sig [24:0] $end
$var wire 10 4) s_exp [9:0] $end
$var wire 23 5) mant [22:0] $end
$var wire 1 j( is_zero $end
$var wire 1 6) is_ssNaN $end
$var wire 1 7) is_spec $end
$var wire 9 8) exp [8:0] $end
$upscope $end
$upscope $end
$scope module round_mode_z_ff $end
$var wire 1 ! clk $end
$var wire 3 9) din [2:0] $end
$var wire 1 B& en $end
$var wire 1 @& rst_l $end
$var wire 3 :) in [2:0] $end
$var wire 3 ;) dout [2:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 3 <) din [2:0] $end
$var wire 1 @& rst_l $end
$var reg 3 =) dout [2:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module sexp_z_ff $end
$var wire 1 ! clk $end
$var wire 10 >) din [9:0] $end
$var wire 1 B& en $end
$var wire 1 @& rst_l $end
$var wire 10 ?) in [9:0] $end
$var wire 10 @) dout [9:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 10 A) din [9:0] $end
$var wire 1 @& rst_l $end
$var reg 10 B) dout [9:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module sign_z_ff $end
$var wire 1 ! clk $end
$var wire 1 U& din $end
$var wire 1 A& en $end
$var wire 1 @& rst_l $end
$var wire 1 C) in $end
$var wire 1 [& dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 C) din $end
$var wire 1 @& rst_l $end
$var reg 1 [& dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module div_inst2 $end
$var wire 32 D) a [31:0] $end
$var wire 32 E) b [31:0] $end
$var wire 1 F) cancel $end
$var wire 1 G) cancel_reset $end
$var wire 1 ! clk $end
$var wire 1 H) entering $end
$var wire 1 I) entering_norm_case $end
$var wire 1 J) in_valid $end
$var wire 1 K) infinite_excep $end
$var wire 1 L) invalid_excep $end
$var wire 1 M) is_out_NaN $end
$var wire 1 N) is_out_inf $end
$var wire 1 O) is_out_zero $end
$var wire 1 P) is_res_NaN $end
$var wire 1 Q) is_res_inf $end
$var wire 1 R) is_res_zero $end
$var wire 1 S) major_excep $end
$var wire 26 T) mantx_z_in [25:0] $end
$var wire 1 U) norm_case $end
$var wire 1 V) not_sNaN_invalid_exc $end
$var wire 10 W) out_sexp [9:0] $end
$var wire 1 X) out_sign $end
$var wire 27 Y) rem [26:0] $end
$var wire 3 Z) round_mode [2:0] $end
$var wire 3 [) roundingModeOut [2:0] $end
$var wire 1 ' rst_l $end
$var wire 1 \) sign_res $end
$var wire 1 ]) skipCycle2 $end
$var wire 1 ^) spec_case_a $end
$var wire 1 _) spec_case_b $end
$var wire 26 `) trail_term [25:0] $end
$var wire 28 a) trail_rem [27:0] $end
$var wire 1 b) sign_z $end
$var wire 1 c) sign_b $end
$var wire 1 d) sign_a $end
$var wire 10 e) sexp_z [9:0] $end
$var wire 11 f) sexp_quot [10:0] $end
$var wire 10 g) sexp_b [9:0] $end
$var wire 10 h) sexp_a [9:0] $end
$var wire 10 i) s_sat_exp_quot [9:0] $end
$var wire 3 j) round_mode_z [2:0] $end
$var wire 26 k) rem_z_in [25:0] $end
$var wire 26 l) rem_z [25:0] $end
$var wire 1 m) out_valid $end
$var wire 27 n) out_mant [26:0] $end
$var wire 32 o) out [31:0] $end
$var wire 33 p) oper2 [32:0] $end
$var wire 33 q) oper1 [32:0] $end
$var wire 1 r) not_zero_rem_z $end
$var wire 1 s) new_bit $end
$var wire 26 t) mantx_z [25:0] $end
$var wire 23 u) mant_b_z [22:0] $end
$var wire 25 v) mant_b [24:0] $end
$var wire 25 w) mant_a [24:0] $end
$var wire 1 x) major_exc_z $end
$var wire 1 y) is_zero_z $end
$var wire 1 z) is_inf_z $end
$var wire 1 {) is_b_zero $end
$var wire 1 |) is_b_sNaN $end
$var wire 1 }) is_b_qNaN $end
$var wire 1 ~) is_b_inf $end
$var wire 1 !* is_a_zero $end
$var wire 1 "* is_a_sNaN $end
$var wire 1 #* is_a_qNaN $end
$var wire 1 $* is_a_inf $end
$var wire 1 %* is_NaN_z $end
$var wire 1 &* in_ready $end
$var wire 1 '* idle $end
$var wire 5 (* exceptions [4:0] $end
$var wire 2 )* dec_hi_mant_a [1:0] $end
$var wire 5 ** cycle_num_in [4:0] $end
$var wire 5 +* cycle_num [4:0] $end
$var wire 25 ,* bit_mask [24:0] $end
$scope function clog2 $end
$var integer 32 -* a [31:0] $end
$upscope $end
$scope module cycle_num_ff $end
$var wire 1 ! clk $end
$var wire 5 .* din [4:0] $end
$var wire 1 /* en $end
$var wire 1 G) rst_l $end
$var wire 5 0* in [4:0] $end
$var wire 5 1* dout [4:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 5 2* din [4:0] $end
$var wire 1 G) rst_l $end
$var reg 5 3* dout [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module exp_a $end
$var wire 32 4* in [31:0] $end
$var wire 1 5* is_zero $end
$var wire 1 6* sign $end
$var wire 23 7* sbnorm_mant [22:0] $end
$var wire 33 8* out [32:0] $end
$var wire 5 9* norm_dist [4:0] $end
$var wire 1 :* mant_in_zero $end
$var wire 23 ;* mant_in [22:0] $end
$var wire 1 <* is_special $end
$var wire 1 =* exp_in_zero $end
$var wire 8 >* exp_in [7:0] $end
$var wire 9 ?* exp_adjusted [8:0] $end
$var wire 9 @* exp [8:0] $end
$scope function clog2 $end
$var integer 32 A* a [31:0] $end
$upscope $end
$scope module countLeadingZeros $end
$var wire 23 B* in [22:0] $end
$var wire 24 C* one_least_reverse_in [23:0] $end
$var wire 23 D* reverse_in [22:0] $end
$var wire 5 E* count [4:0] $end
$scope begin bt[0] $end
$var wire 5 F* count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 G* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 H* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 I* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 J* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 K* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 L* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 M* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 N* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 O* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 P* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 Q* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 R* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 S* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 T* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 U* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 V* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 W* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 X* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 Y* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 Z* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 [* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 \* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 ]* count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 ^* in [22:0] $end
$var wire 23 _* out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module exp_b $end
$var wire 32 `* in [31:0] $end
$var wire 1 a* is_zero $end
$var wire 1 b* sign $end
$var wire 23 c* sbnorm_mant [22:0] $end
$var wire 33 d* out [32:0] $end
$var wire 5 e* norm_dist [4:0] $end
$var wire 1 f* mant_in_zero $end
$var wire 23 g* mant_in [22:0] $end
$var wire 1 h* is_special $end
$var wire 1 i* exp_in_zero $end
$var wire 8 j* exp_in [7:0] $end
$var wire 9 k* exp_adjusted [8:0] $end
$var wire 9 l* exp [8:0] $end
$scope function clog2 $end
$var integer 32 m* a [31:0] $end
$upscope $end
$scope module countLeadingZeros $end
$var wire 23 n* in [22:0] $end
$var wire 24 o* one_least_reverse_in [23:0] $end
$var wire 23 p* reverse_in [22:0] $end
$var wire 5 q* count [4:0] $end
$scope begin bt[0] $end
$var wire 5 r* count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 s* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 t* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 u* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 v* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 w* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 x* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 y* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 z* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 {* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 |* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 }* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 ~* count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 !+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 "+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 #+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 $+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 %+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 &+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 '+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 (+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 )+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 *+ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 ++ count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 ,+ in [22:0] $end
$var wire 23 -+ out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_NaN_z_ff $end
$var wire 1 ! clk $end
$var wire 1 P) din $end
$var wire 1 H) en $end
$var wire 1 G) rst_l $end
$var wire 1 .+ in $end
$var wire 1 %* dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 .+ din $end
$var wire 1 G) rst_l $end
$var reg 1 %* dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_inf_z_ff $end
$var wire 1 ! clk $end
$var wire 1 Q) din $end
$var wire 1 H) en $end
$var wire 1 G) rst_l $end
$var wire 1 /+ in $end
$var wire 1 z) dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 /+ din $end
$var wire 1 G) rst_l $end
$var reg 1 z) dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module is_zero_z_ff $end
$var wire 1 ! clk $end
$var wire 1 R) din $end
$var wire 1 H) en $end
$var wire 1 G) rst_l $end
$var wire 1 0+ in $end
$var wire 1 y) dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 0+ din $end
$var wire 1 G) rst_l $end
$var reg 1 y) dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_a $end
$var wire 33 1+ in [32:0] $end
$var wire 1 $* is_inf $end
$var wire 1 #* is_qNaN $end
$var wire 1 "* is_sNaN $end
$var wire 1 d) sign $end
$var wire 25 2+ sig [24:0] $end
$var wire 10 3+ s_exp [9:0] $end
$var wire 23 4+ mant [22:0] $end
$var wire 1 !* is_zero $end
$var wire 1 5+ is_ssNaN $end
$var wire 1 6+ is_spec $end
$var wire 9 7+ exp [8:0] $end
$upscope $end
$scope module mac_spec_check_b $end
$var wire 33 8+ in [32:0] $end
$var wire 1 ~) is_inf $end
$var wire 1 }) is_qNaN $end
$var wire 1 |) is_sNaN $end
$var wire 1 c) sign $end
$var wire 25 9+ sig [24:0] $end
$var wire 10 :+ s_exp [9:0] $end
$var wire 23 ;+ mant [22:0] $end
$var wire 1 {) is_zero $end
$var wire 1 <+ is_ssNaN $end
$var wire 1 =+ is_spec $end
$var wire 9 >+ exp [8:0] $end
$upscope $end
$scope module major_exc_z_ff $end
$var wire 1 ! clk $end
$var wire 1 S) din $end
$var wire 1 H) en $end
$var wire 1 G) rst_l $end
$var wire 1 ?+ in $end
$var wire 1 x) dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 ?+ din $end
$var wire 1 G) rst_l $end
$var reg 1 x) dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mant_b_z_ff $end
$var wire 1 ! clk $end
$var wire 23 @+ din [22:0] $end
$var wire 1 I) en $end
$var wire 1 G) rst_l $end
$var wire 23 A+ in [22:0] $end
$var wire 23 B+ dout [22:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 23 C+ din [22:0] $end
$var wire 1 G) rst_l $end
$var reg 23 D+ dout [22:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mantx_z_ff $end
$var wire 1 ! clk $end
$var wire 26 E+ din [25:0] $end
$var wire 1 F+ en $end
$var wire 1 G) rst_l $end
$var wire 26 G+ in [25:0] $end
$var wire 26 H+ dout [25:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 26 I+ din [25:0] $end
$var wire 1 G) rst_l $end
$var reg 26 J+ dout [25:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_zero_rem_z_ff $end
$var wire 1 ! clk $end
$var wire 1 K+ din $end
$var wire 1 L+ en $end
$var wire 1 G) rst_l $end
$var wire 1 M+ in $end
$var wire 1 r) dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 M+ din $end
$var wire 1 G) rst_l $end
$var reg 1 r) dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module rem_z_ff $end
$var wire 1 ! clk $end
$var wire 26 N+ din [25:0] $end
$var wire 1 O+ en $end
$var wire 1 G) rst_l $end
$var wire 26 P+ in [25:0] $end
$var wire 26 Q+ dout [25:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 26 R+ din [25:0] $end
$var wire 1 G) rst_l $end
$var reg 26 S+ dout [25:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_exception $end
$var wire 27 T+ adjusted_mant [26:0] $end
$var wire 1 U+ common_case $end
$var wire 1 M) in_is_NaN $end
$var wire 1 N) in_is_inf $end
$var wire 1 O) in_is_zero $end
$var wire 27 V+ in_mant [26:0] $end
$var wire 10 W+ in_sexp [9:0] $end
$var wire 1 X) in_sign $end
$var wire 1 X+ inexact $end
$var wire 1 K) infinite_excep $end
$var wire 1 L) invalid_excep $end
$var wire 1 Y+ is_out_NaN $end
$var wire 23 Z+ mant_out [22:0] $end
$var wire 1 [+ notNaN_is_inf_out $end
$var wire 1 \+ notNaN_is_special_inf_out $end
$var wire 1 ]+ overflow $end
$var wire 1 ^+ overflow_round_magup $end
$var wire 1 _+ peg_max_finite_mag_out $end
$var wire 1 `+ peg_min_nonzero_mag_out $end
$var wire 1 a+ round_mag_up $end
$var wire 3 b+ round_mode [2:0] $end
$var wire 1 c+ underflow $end
$var wire 5 d+ subnorm_shift_dist [4:0] $end
$var wire 1 e+ sign_res $end
$var wire 1 f+ sign_out $end
$var wire 10 g+ s_exp [9:0] $end
$var wire 1 h+ roundmode_near_even $end
$var wire 1 i+ roundmode_min_mag $end
$var wire 1 j+ roundmode_min $end
$var wire 1 k+ roundmode_max_mag $end
$var wire 1 l+ roundmode_max $end
$var wire 32 m+ result [31:0] $end
$var wire 33 n+ out [32:0] $end
$var wire 23 o+ mant_res [22:0] $end
$var wire 25 p+ mant [24:0] $end
$var wire 1 q+ is_zero $end
$var wire 1 r+ is_subnorm $end
$var wire 1 s+ is_inf $end
$var wire 1 t+ is_NaN $end
$var wire 8 u+ exp_res [7:0] $end
$var wire 9 v+ exp_out [8:0] $end
$var wire 5 w+ exceptions [4:0] $end
$var wire 1 x+ do_shift_mant_down1 $end
$var wire 1 y+ common_underflow $end
$var wire 1 z+ common_total_underflow $end
$var wire 1 {+ common_overflow $end
$var wire 23 |+ common_mant_out [22:0] $end
$var wire 1 }+ common_inexact $end
$var wire 9 ~+ common_exp_out [8:0] $end
$var wire 10 !, adjusted_sexp [9:0] $end
$scope function clog2 $end
$var integer 32 ", a [31:0] $end
$upscope $end
$scope begin genblk2 $end
$var wire 1 #, any_round $end
$var wire 1 $, any_round_extra $end
$var wire 1 %, round_carry $end
$var wire 1 &, round_incr $end
$var wire 1 ', round_pos_bit $end
$var wire 27 (, round_pos_mask [26:0] $end
$var wire 1 ), unbound_range_any_round $end
$var wire 1 *, unbound_range_round_incr $end
$var wire 1 +, unbound_range_round_posbit $end
$var wire 27 ,, shifted_round_mask [26:0] $end
$var wire 11 -, sext_adjusted_exp [10:0] $end
$var wire 11 ., s_rounded_exp [10:0] $end
$var wire 26 /, rounded_mant [25:0] $end
$var wire 27 0, roundMask [26:0] $end
$scope begin genblk4 $end
$var wire 25 1, roundMask_main [24:0] $end
$scope module lowmask_roundmask $end
$var wire 9 2, in [8:0] $end
$var wire 25 3, reverse_out [24:0] $end
$var wire 25 4, out [24:0] $end
$var wire 513 5, c [512:0] $end
$scope module reverse_lo $end
$var wire 25 6, in [24:0] $end
$var wire 25 7, out [24:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$scope begin bt[23] $end
$upscope $end
$scope begin bt[24] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_out $end
$var wire 33 8, in [32:0] $end
$var wire 1 s+ is_inf $end
$var wire 1 t+ is_qNaN $end
$var wire 1 9, is_sNaN $end
$var wire 1 e+ sign $end
$var wire 25 :, sig [24:0] $end
$var wire 10 ;, s_exp [9:0] $end
$var wire 23 <, mant [22:0] $end
$var wire 1 q+ is_zero $end
$var wire 1 =, is_ssNaN $end
$var wire 1 >, is_spec $end
$var wire 9 ?, exp [8:0] $end
$upscope $end
$upscope $end
$scope module round_mode_z_ff $end
$var wire 1 ! clk $end
$var wire 3 @, din [2:0] $end
$var wire 1 I) en $end
$var wire 1 G) rst_l $end
$var wire 3 A, in [2:0] $end
$var wire 3 B, dout [2:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 3 C, din [2:0] $end
$var wire 1 G) rst_l $end
$var reg 3 D, dout [2:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module sexp_z_ff $end
$var wire 1 ! clk $end
$var wire 10 E, din [9:0] $end
$var wire 1 I) en $end
$var wire 1 G) rst_l $end
$var wire 10 F, in [9:0] $end
$var wire 10 G, dout [9:0] $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 10 H, din [9:0] $end
$var wire 1 G) rst_l $end
$var reg 10 I, dout [9:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module sign_z_ff $end
$var wire 1 ! clk $end
$var wire 1 \) din $end
$var wire 1 H) en $end
$var wire 1 G) rst_l $end
$var wire 1 J, in $end
$var wire 1 b) dout $end
$scope begin genblock $end
$scope module dff $end
$var wire 1 ! clk $end
$var wire 1 J, din $end
$var wire 1 G) rst_l $end
$var reg 1 b) dout $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mul_inst1 $end
$var wire 32 K, a [31:0] $end
$var wire 32 L, b [31:0] $end
$var wire 1 M, infinite_excep $end
$var wire 1 N, invalid_excep $end
$var wire 1 O, is_a_zero $end
$var wire 1 P, is_b_zero $end
$var wire 1 Q, is_out_NaN $end
$var wire 1 R, is_out_inf $end
$var wire 1 S, is_out_zero $end
$var wire 32 T, out [31:0] $end
$var wire 3 U, round_mode [2:0] $end
$var wire 1 V, sign_res $end
$var wire 23 W, subnorm_mant_b [22:0] $end
$var wire 23 X, subnorm_mant_a [22:0] $end
$var wire 1 Y, sign_oper2 $end
$var wire 1 Z, sign_oper1 $end
$var wire 1 [, sign_b $end
$var wire 1 \, sign_a $end
$var wire 10 ], sexp_2 [9:0] $end
$var wire 10 ^, sexp_1 [9:0] $end
$var wire 27 _, prod_comp [26:0] $end
$var wire 33 `, oper2 [32:0] $end
$var wire 33 a, oper1 [32:0] $end
$var wire 5 b, norm_dist_b [4:0] $end
$var wire 5 c, norm_dist_a [4:0] $end
$var wire 48 d, mant_prod [47:0] $end
$var wire 23 e, mant_oper2 [22:0] $end
$var wire 23 f, mant_oper1 [22:0] $end
$var wire 1 g, mant_b_zero $end
$var wire 23 h, mant_b [22:0] $end
$var wire 1 i, mant_a_zero $end
$var wire 23 j, mant_a [22:0] $end
$var wire 25 k, mant_2 [24:0] $end
$var wire 25 l, mant_1 [24:0] $end
$var wire 1 m, is_zero_oper2 $end
$var wire 1 n, is_zero_oper1 $end
$var wire 1 o, is_b_special $end
$var wire 1 p, is_a_special $end
$var wire 9 q, expb [8:0] $end
$var wire 9 r, expa [8:0] $end
$var wire 10 s, exp_unbais [9:0] $end
$var wire 9 t, exp_oper2 [8:0] $end
$var wire 9 u, exp_oper1 [8:0] $end
$var wire 1 v, exp_b_zero $end
$var wire 8 w, exp_b [7:0] $end
$var wire 1 x, exp_a_zero $end
$var wire 8 y, exp_a [7:0] $end
$var wire 5 z, exceptions [4:0] $end
$var wire 10 {, check_b [9:0] $end
$var wire 10 |, check_a [9:0] $end
$var wire 9 }, adj_exp_b [8:0] $end
$var wire 9 ~, adj_exp_a [8:0] $end
$scope module norm_a $end
$var wire 23 !- in [22:0] $end
$var wire 24 "- one_least_reverse_in [23:0] $end
$var wire 23 #- reverse_in [22:0] $end
$var wire 5 $- count [4:0] $end
$scope begin bt[0] $end
$var wire 5 %- count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 &- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 '- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 (- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 )- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 *- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 +- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 ,- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 -- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 .- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 /- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 0- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 1- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 2- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 3- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 4- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 5- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 6- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 7- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 8- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 9- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 :- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 ;- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 <- count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 =- in [22:0] $end
$var wire 23 >- out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module norm_b $end
$var wire 23 ?- in [22:0] $end
$var wire 24 @- one_least_reverse_in [23:0] $end
$var wire 23 A- reverse_in [22:0] $end
$var wire 5 B- count [4:0] $end
$scope begin bt[0] $end
$var wire 5 C- count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 D- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 E- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 F- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 G- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 H- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 I- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 J- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 K- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 L- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 M- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 N- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 O- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 P- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 Q- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 R- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 S- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 T- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 U- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 V- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 W- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 X- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 Y- count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 Z- count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 [- in [22:0] $end
$var wire 23 \- out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_exception $end
$var wire 27 ]- adjusted_mant [26:0] $end
$var wire 1 ^- common_case $end
$var wire 1 Q, in_is_NaN $end
$var wire 1 R, in_is_inf $end
$var wire 1 S, in_is_zero $end
$var wire 27 _- in_mant [26:0] $end
$var wire 10 `- in_sexp [9:0] $end
$var wire 1 V, in_sign $end
$var wire 1 a- inexact $end
$var wire 1 M, infinite_excep $end
$var wire 1 N, invalid_excep $end
$var wire 1 b- is_out_NaN $end
$var wire 23 c- mant_out [22:0] $end
$var wire 1 d- notNaN_is_inf_out $end
$var wire 1 e- notNaN_is_special_inf_out $end
$var wire 1 f- overflow $end
$var wire 1 g- overflow_round_magup $end
$var wire 1 h- peg_max_finite_mag_out $end
$var wire 1 i- peg_min_nonzero_mag_out $end
$var wire 32 j- result [31:0] $end
$var wire 1 k- round_mag_up $end
$var wire 3 l- round_mode [2:0] $end
$var wire 1 m- underflow $end
$var wire 5 n- subnorm_shift_dist [4:0] $end
$var wire 1 o- sign_res $end
$var wire 1 p- sign_out $end
$var wire 10 q- s_exp [9:0] $end
$var wire 1 r- roundmode_near_even $end
$var wire 1 s- roundmode_min_mag $end
$var wire 1 t- roundmode_min $end
$var wire 1 u- roundmode_max_mag $end
$var wire 1 v- roundmode_max $end
$var wire 33 w- out [32:0] $end
$var wire 23 x- mant_res [22:0] $end
$var wire 25 y- mant [24:0] $end
$var wire 1 z- is_zero $end
$var wire 1 {- is_subnorm $end
$var wire 1 |- is_inf $end
$var wire 1 }- is_NaN $end
$var wire 8 ~- exp_res [7:0] $end
$var wire 9 !. exp_out [8:0] $end
$var wire 5 ". exceptions [4:0] $end
$var wire 1 #. do_shift_mant_down1 $end
$var wire 1 $. common_underflow $end
$var wire 1 %. common_total_underflow $end
$var wire 1 &. common_overflow $end
$var wire 23 '. common_mant_out [22:0] $end
$var wire 1 (. common_inexact $end
$var wire 9 ). common_exp_out [8:0] $end
$var wire 10 *. adjusted_sexp [9:0] $end
$scope function clog2 $end
$var integer 32 +. a [31:0] $end
$upscope $end
$scope begin genblk2 $end
$var wire 1 ,. any_round $end
$var wire 1 -. any_round_extra $end
$var wire 1 .. round_carry $end
$var wire 1 /. round_incr $end
$var wire 1 0. round_pos_bit $end
$var wire 27 1. round_pos_mask [26:0] $end
$var wire 1 2. unbound_range_any_round $end
$var wire 1 3. unbound_range_round_incr $end
$var wire 1 4. unbound_range_round_posbit $end
$var wire 27 5. shifted_round_mask [26:0] $end
$var wire 11 6. sext_adjusted_exp [10:0] $end
$var wire 11 7. s_rounded_exp [10:0] $end
$var wire 26 8. rounded_mant [25:0] $end
$var wire 27 9. roundMask [26:0] $end
$scope begin genblk4 $end
$var wire 25 :. roundMask_main [24:0] $end
$scope module lowmask_roundmask $end
$var wire 9 ;. in [8:0] $end
$var wire 25 <. reverse_out [24:0] $end
$var wire 25 =. out [24:0] $end
$var wire 513 >. c [512:0] $end
$scope module reverse_lo $end
$var wire 25 ?. in [24:0] $end
$var wire 25 @. out [24:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$scope begin bt[23] $end
$upscope $end
$scope begin bt[24] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_out $end
$var wire 33 A. in [32:0] $end
$var wire 1 |- is_inf $end
$var wire 1 }- is_qNaN $end
$var wire 1 B. is_sNaN $end
$var wire 1 o- sign $end
$var wire 25 C. sig [24:0] $end
$var wire 10 D. s_exp [9:0] $end
$var wire 23 E. mant [22:0] $end
$var wire 1 z- is_zero $end
$var wire 1 F. is_ssNaN $end
$var wire 1 G. is_spec $end
$var wire 9 H. exp [8:0] $end
$upscope $end
$upscope $end
$scope module spec_check_a $end
$var wire 32 I. in [31:0] $end
$var wire 1 J. is_neg_inf $end
$var wire 1 K. is_neg_subnorm $end
$var wire 1 L. is_neg_zero $end
$var wire 1 M. is_pos_inf $end
$var wire 1 N. is_pos_subnorm $end
$var wire 1 O. is_pos_zero $end
$var wire 1 P. is_qNaN $end
$var wire 1 Q. is_sNaN $end
$var wire 1 R. sign $end
$var wire 1 S. sig_zero $end
$var wire 23 T. sig [22:0] $end
$var wire 10 U. result [9:0] $end
$var wire 1 V. is_pos_norm $end
$var wire 1 W. is_neg_norm $end
$var wire 1 X. exp_zero $end
$var wire 1 Y. exp_one $end
$var wire 8 Z. exp [7:0] $end
$upscope $end
$scope module spec_check_b $end
$var wire 32 [. in [31:0] $end
$var wire 1 \. is_neg_inf $end
$var wire 1 ]. is_neg_subnorm $end
$var wire 1 ^. is_neg_zero $end
$var wire 1 _. is_pos_inf $end
$var wire 1 `. is_pos_subnorm $end
$var wire 1 a. is_pos_zero $end
$var wire 1 b. is_qNaN $end
$var wire 1 c. is_sNaN $end
$var wire 1 d. sign $end
$var wire 1 e. sig_zero $end
$var wire 23 f. sig [22:0] $end
$var wire 10 g. result [9:0] $end
$var wire 1 h. is_pos_norm $end
$var wire 1 i. is_neg_norm $end
$var wire 1 j. exp_zero $end
$var wire 1 k. exp_one $end
$var wire 8 l. exp [7:0] $end
$upscope $end
$upscope $end
$scope module mul_inst2 $end
$var wire 32 m. a [31:0] $end
$var wire 32 n. b [31:0] $end
$var wire 1 o. infinite_excep $end
$var wire 1 p. invalid_excep $end
$var wire 1 q. is_a_zero $end
$var wire 1 r. is_b_zero $end
$var wire 1 s. is_out_NaN $end
$var wire 1 t. is_out_inf $end
$var wire 1 u. is_out_zero $end
$var wire 32 v. out [31:0] $end
$var wire 3 w. round_mode [2:0] $end
$var wire 1 x. sign_res $end
$var wire 23 y. subnorm_mant_b [22:0] $end
$var wire 23 z. subnorm_mant_a [22:0] $end
$var wire 1 {. sign_oper2 $end
$var wire 1 |. sign_oper1 $end
$var wire 1 }. sign_b $end
$var wire 1 ~. sign_a $end
$var wire 10 !/ sexp_2 [9:0] $end
$var wire 10 "/ sexp_1 [9:0] $end
$var wire 27 #/ prod_comp [26:0] $end
$var wire 33 $/ oper2 [32:0] $end
$var wire 33 %/ oper1 [32:0] $end
$var wire 5 &/ norm_dist_b [4:0] $end
$var wire 5 '/ norm_dist_a [4:0] $end
$var wire 48 (/ mant_prod [47:0] $end
$var wire 23 )/ mant_oper2 [22:0] $end
$var wire 23 */ mant_oper1 [22:0] $end
$var wire 1 +/ mant_b_zero $end
$var wire 23 ,/ mant_b [22:0] $end
$var wire 1 -/ mant_a_zero $end
$var wire 23 ./ mant_a [22:0] $end
$var wire 25 // mant_2 [24:0] $end
$var wire 25 0/ mant_1 [24:0] $end
$var wire 1 1/ is_zero_oper2 $end
$var wire 1 2/ is_zero_oper1 $end
$var wire 1 3/ is_b_special $end
$var wire 1 4/ is_a_special $end
$var wire 9 5/ expb [8:0] $end
$var wire 9 6/ expa [8:0] $end
$var wire 10 7/ exp_unbais [9:0] $end
$var wire 9 8/ exp_oper2 [8:0] $end
$var wire 9 9/ exp_oper1 [8:0] $end
$var wire 1 :/ exp_b_zero $end
$var wire 8 ;/ exp_b [7:0] $end
$var wire 1 </ exp_a_zero $end
$var wire 8 =/ exp_a [7:0] $end
$var wire 5 >/ exceptions [4:0] $end
$var wire 10 ?/ check_b [9:0] $end
$var wire 10 @/ check_a [9:0] $end
$var wire 9 A/ adj_exp_b [8:0] $end
$var wire 9 B/ adj_exp_a [8:0] $end
$scope module norm_a $end
$var wire 23 C/ in [22:0] $end
$var wire 24 D/ one_least_reverse_in [23:0] $end
$var wire 23 E/ reverse_in [22:0] $end
$var wire 5 F/ count [4:0] $end
$scope begin bt[0] $end
$var wire 5 G/ count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 H/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 I/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 J/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 K/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 L/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 M/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 N/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 O/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 P/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 Q/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 R/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 S/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 T/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 U/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 V/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 W/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 X/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 Y/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 Z/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 [/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 \/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 ]/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 ^/ count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 _/ in [22:0] $end
$var wire 23 `/ out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module norm_b $end
$var wire 23 a/ in [22:0] $end
$var wire 24 b/ one_least_reverse_in [23:0] $end
$var wire 23 c/ reverse_in [22:0] $end
$var wire 5 d/ count [4:0] $end
$scope begin bt[0] $end
$var wire 5 e/ count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 f/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 g/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 h/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 i/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 j/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 k/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 l/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 m/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 n/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 o/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 p/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 q/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 r/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 s/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 t/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 u/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 v/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 w/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 x/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 y/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 z/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 {/ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 |/ count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 }/ in [22:0] $end
$var wire 23 ~/ out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_exception $end
$var wire 27 !0 adjusted_mant [26:0] $end
$var wire 1 "0 common_case $end
$var wire 1 s. in_is_NaN $end
$var wire 1 t. in_is_inf $end
$var wire 1 u. in_is_zero $end
$var wire 27 #0 in_mant [26:0] $end
$var wire 10 $0 in_sexp [9:0] $end
$var wire 1 x. in_sign $end
$var wire 1 %0 inexact $end
$var wire 1 o. infinite_excep $end
$var wire 1 p. invalid_excep $end
$var wire 1 &0 is_out_NaN $end
$var wire 23 '0 mant_out [22:0] $end
$var wire 1 (0 notNaN_is_inf_out $end
$var wire 1 )0 notNaN_is_special_inf_out $end
$var wire 1 *0 overflow $end
$var wire 1 +0 overflow_round_magup $end
$var wire 1 ,0 peg_max_finite_mag_out $end
$var wire 1 -0 peg_min_nonzero_mag_out $end
$var wire 32 .0 result [31:0] $end
$var wire 1 /0 round_mag_up $end
$var wire 3 00 round_mode [2:0] $end
$var wire 1 10 underflow $end
$var wire 5 20 subnorm_shift_dist [4:0] $end
$var wire 1 30 sign_res $end
$var wire 1 40 sign_out $end
$var wire 10 50 s_exp [9:0] $end
$var wire 1 60 roundmode_near_even $end
$var wire 1 70 roundmode_min_mag $end
$var wire 1 80 roundmode_min $end
$var wire 1 90 roundmode_max_mag $end
$var wire 1 :0 roundmode_max $end
$var wire 33 ;0 out [32:0] $end
$var wire 23 <0 mant_res [22:0] $end
$var wire 25 =0 mant [24:0] $end
$var wire 1 >0 is_zero $end
$var wire 1 ?0 is_subnorm $end
$var wire 1 @0 is_inf $end
$var wire 1 A0 is_NaN $end
$var wire 8 B0 exp_res [7:0] $end
$var wire 9 C0 exp_out [8:0] $end
$var wire 5 D0 exceptions [4:0] $end
$var wire 1 E0 do_shift_mant_down1 $end
$var wire 1 F0 common_underflow $end
$var wire 1 G0 common_total_underflow $end
$var wire 1 H0 common_overflow $end
$var wire 23 I0 common_mant_out [22:0] $end
$var wire 1 J0 common_inexact $end
$var wire 9 K0 common_exp_out [8:0] $end
$var wire 10 L0 adjusted_sexp [9:0] $end
$scope function clog2 $end
$var integer 32 M0 a [31:0] $end
$upscope $end
$scope begin genblk2 $end
$var wire 1 N0 any_round $end
$var wire 1 O0 any_round_extra $end
$var wire 1 P0 round_carry $end
$var wire 1 Q0 round_incr $end
$var wire 1 R0 round_pos_bit $end
$var wire 27 S0 round_pos_mask [26:0] $end
$var wire 1 T0 unbound_range_any_round $end
$var wire 1 U0 unbound_range_round_incr $end
$var wire 1 V0 unbound_range_round_posbit $end
$var wire 27 W0 shifted_round_mask [26:0] $end
$var wire 11 X0 sext_adjusted_exp [10:0] $end
$var wire 11 Y0 s_rounded_exp [10:0] $end
$var wire 26 Z0 rounded_mant [25:0] $end
$var wire 27 [0 roundMask [26:0] $end
$scope begin genblk4 $end
$var wire 25 \0 roundMask_main [24:0] $end
$scope module lowmask_roundmask $end
$var wire 9 ]0 in [8:0] $end
$var wire 25 ^0 reverse_out [24:0] $end
$var wire 25 _0 out [24:0] $end
$var wire 513 `0 c [512:0] $end
$scope module reverse_lo $end
$var wire 25 a0 in [24:0] $end
$var wire 25 b0 out [24:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$scope begin bt[23] $end
$upscope $end
$scope begin bt[24] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_out $end
$var wire 33 c0 in [32:0] $end
$var wire 1 @0 is_inf $end
$var wire 1 A0 is_qNaN $end
$var wire 1 d0 is_sNaN $end
$var wire 1 30 sign $end
$var wire 25 e0 sig [24:0] $end
$var wire 10 f0 s_exp [9:0] $end
$var wire 23 g0 mant [22:0] $end
$var wire 1 >0 is_zero $end
$var wire 1 h0 is_ssNaN $end
$var wire 1 i0 is_spec $end
$var wire 9 j0 exp [8:0] $end
$upscope $end
$upscope $end
$scope module spec_check_a $end
$var wire 32 k0 in [31:0] $end
$var wire 1 l0 is_neg_inf $end
$var wire 1 m0 is_neg_subnorm $end
$var wire 1 n0 is_neg_zero $end
$var wire 1 o0 is_pos_inf $end
$var wire 1 p0 is_pos_subnorm $end
$var wire 1 q0 is_pos_zero $end
$var wire 1 r0 is_qNaN $end
$var wire 1 s0 is_sNaN $end
$var wire 1 t0 sign $end
$var wire 1 u0 sig_zero $end
$var wire 23 v0 sig [22:0] $end
$var wire 10 w0 result [9:0] $end
$var wire 1 x0 is_pos_norm $end
$var wire 1 y0 is_neg_norm $end
$var wire 1 z0 exp_zero $end
$var wire 1 {0 exp_one $end
$var wire 8 |0 exp [7:0] $end
$upscope $end
$scope module spec_check_b $end
$var wire 32 }0 in [31:0] $end
$var wire 1 ~0 is_neg_inf $end
$var wire 1 !1 is_neg_subnorm $end
$var wire 1 "1 is_neg_zero $end
$var wire 1 #1 is_pos_inf $end
$var wire 1 $1 is_pos_subnorm $end
$var wire 1 %1 is_pos_zero $end
$var wire 1 &1 is_qNaN $end
$var wire 1 '1 is_sNaN $end
$var wire 1 (1 sign $end
$var wire 1 )1 sig_zero $end
$var wire 23 *1 sig [22:0] $end
$var wire 10 +1 result [9:0] $end
$var wire 1 ,1 is_pos_norm $end
$var wire 1 -1 is_neg_norm $end
$var wire 1 .1 exp_zero $end
$var wire 1 /1 exp_one $end
$var wire 8 01 exp [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 01
x/1
x.1
x-1
x,1
bx +1
bx *1
x)1
x(1
x'1
x&1
x%1
x$1
x#1
x"1
x!1
x~0
bx }0
b0 |0
0{0
1z0
0y0
0x0
b100000 w0
b1 v0
0u0
0t0
0s0
0r0
0q0
1p0
0o0
0n0
0m0
0l0
b1 k0
bx j0
xi0
xh0
bx g0
b0xxxxxxxxx f0
b0xxxxxxxxxxxxxxxxxxxxxxxx e0
xd0
bx c0
bx b0
bx a0
b`0
bx _0
bx ^0
bx ]0
bx \0
bx11 [0
bx Z0
bx Y0
bx X0
b0xxxxxxxxxxxxxxxxxxxxxxxxx1 W0
xV0
xU0
xT0
bx0 S0
xR0
xQ0
xP0
xO0
xN0
bx M0
bx L0
bx K0
xJ0
bx I0
xH0
xG0
xF0
xE0
bx0xxx D0
bx C0
bx B0
xA0
x@0
x?0
x>0
b0xxxxxxxxxxxxxxxxxxxxxxxx =0
bx <0
bx ;0
x:0
x90
x80
x70
x60
b0xxxxxxxxx 50
x40
x30
bx 20
x10
bz 00
x/0
bx .0
x-0
x,0
x+0
x*0
x)0
x(0
bx '0
x&0
x%0
bx $0
bx #0
x"0
bx !0
bx ~/
bx }/
bx |/
bx {/
bx z/
bx y/
bx x/
bx w/
bx v/
bx u/
b0xxxx t/
b0xxxx s/
b0xxxx r/
b0xxxx q/
b0xxxx p/
b0xxxx o/
b0xxxx n/
b0xxxx m/
b0xxx l/
b0xxx k/
b0xxx j/
b0xxx i/
b0xx h/
b0xx g/
b0x f/
b0 e/
bx d/
bx c/
bx b/
bx a/
b10000000000000000000000 `/
b1 _/
b10110 ^/
b10110 ]/
b0 \/
b0 [/
b0 Z/
b0 Y/
b0 X/
b0 W/
b0 V/
b0 U/
b0 T/
b0 S/
b0 R/
b0 Q/
b0 P/
b0 O/
b0 N/
b0 M/
b0 L/
b0 K/
b0 J/
b0 I/
b0 H/
b0 G/
b10110 F/
b10000000000000000000000 E/
b10000000000000000000000 D/
b1 C/
b1101011 B/
bx A/
b100000 @/
bx ?/
bx0xxx >/
b0 =/
1</
bx ;/
x:/
b1101011 9/
bx 8/
bx 7/
b1101011 6/
bx 5/
04/
x3/
02/
x1/
b100000000000000000000000 0/
b0xxxxxxxxxxxxxxxxxxxxxxxx //
b1 ./
0-/
bx ,/
x+/
b0 */
bx )/
bx (/
b10110 '/
bx &/
b110101100000000000000000000000 %/
bx $/
bx #/
b1101011 "/
b0xxxxxxxxx !/
0~.
x}.
0|.
x{.
b0 z.
bx0 y.
xx.
bz w.
bx v.
xu.
xt.
xs.
xr.
0q.
xp.
0o.
bx n.
b1 m.
bx l.
xk.
xj.
xi.
xh.
bx g.
bx f.
xe.
xd.
xc.
xb.
xa.
x`.
x_.
x^.
x].
x\.
bx [.
b0 Z.
0Y.
1X.
0W.
0V.
b100000 U.
b1 T.
0S.
0R.
0Q.
0P.
0O.
1N.
0M.
0L.
0K.
0J.
b1 I.
bx H.
xG.
xF.
bx E.
b0xxxxxxxxx D.
b0xxxxxxxxxxxxxxxxxxxxxxxx C.
xB.
bx A.
bx @.
bx ?.
b
bx =.
bx <.
bx ;.
bx :.
bx11 9.
bx 8.
bx 7.
bx 6.
b0xxxxxxxxxxxxxxxxxxxxxxxxx1 5.
x4.
x3.
x2.
bx0 1.
x0.
x/.
x..
x-.
x,.
bx +.
bx *.
bx ).
x(.
bx '.
x&.
x%.
x$.
x#.
bx0xxx ".
bx !.
bx ~-
x}-
x|-
x{-
xz-
b0xxxxxxxxxxxxxxxxxxxxxxxx y-
bx x-
bx w-
xv-
xu-
xt-
xs-
xr-
b0xxxxxxxxx q-
xp-
xo-
bx n-
xm-
bz l-
xk-
bx j-
xi-
xh-
xg-
xf-
xe-
xd-
bx c-
xb-
xa-
bx `-
bx _-
x^-
bx ]-
bx \-
bx [-
bx Z-
bx Y-
bx X-
bx W-
bx V-
bx U-
bx T-
bx S-
b0xxxx R-
b0xxxx Q-
b0xxxx P-
b0xxxx O-
b0xxxx N-
b0xxxx M-
b0xxxx L-
b0xxxx K-
b0xxx J-
b0xxx I-
b0xxx H-
b0xxx G-
b0xx F-
b0xx E-
b0x D-
b0 C-
bx B-
bx A-
bx @-
bx ?-
b10000000000000000000000 >-
b1 =-
b10110 <-
b10110 ;-
b0 :-
b0 9-
b0 8-
b0 7-
b0 6-
b0 5-
b0 4-
b0 3-
b0 2-
b0 1-
b0 0-
b0 /-
b0 .-
b0 --
b0 ,-
b0 +-
b0 *-
b0 )-
b0 (-
b0 '-
b0 &-
b0 %-
b10110 $-
b10000000000000000000000 #-
b10000000000000000000000 "-
b1 !-
b1101011 ~,
bx },
b100000 |,
bx {,
bx0xxx z,
b0 y,
1x,
bx w,
xv,
b1101011 u,
bx t,
bx s,
b1101011 r,
bx q,
0p,
xo,
0n,
xm,
b100000000000000000000000 l,
b0xxxxxxxxxxxxxxxxxxxxxxxx k,
b1 j,
0i,
bx h,
xg,
b0 f,
bx e,
bx d,
b10110 c,
bx b,
b110101100000000000000000000000 a,
bx `,
bx _,
b1101011 ^,
b0xxxxxxxxx ],
0\,
x[,
0Z,
xY,
b0 X,
bx0 W,
xV,
bz U,
bx T,
xS,
xR,
xQ,
xP,
0O,
xN,
0M,
bx L,
b1 K,
xJ,
bx I,
bx H,
bx G,
bx F,
bx E,
bx D,
bx C,
bx B,
bx A,
bz @,
bx ?,
x>,
x=,
bx <,
b0xxxxxxxxx ;,
b0xxxxxxxxxxxxxxxxxxxxxxxx :,
x9,
bx 8,
bx 7,
bx 6,
b
bx 4,
bx 3,
bx 2,
bx 1,
bx11 0,
bx /,
bx .,
bx -,
b0xxxxxxxxxxxxxxxxxxxxxxxxx1 ,,
x+,
x*,
x),
bx0 (,
x',
x&,
x%,
x$,
x#,
bx ",
bx !,
bx ~+
x}+
bx |+
x{+
xz+
xy+
xx+
bx w+
bx v+
bx u+
xt+
xs+
xr+
xq+
b0xxxxxxxxxxxxxxxxxxxxxxxx p+
bx o+
bx n+
bx m+
xl+
xk+
xj+
xi+
xh+
b0xxxxxxxxx g+
xf+
xe+
bx d+
xc+
bz b+
xa+
x`+
x_+
x^+
x]+
x\+
x[+
bx Z+
xY+
xX+
bx W+
bx V+
xU+
bx T+
bx S+
bx R+
bx Q+
bx P+
xO+
bx N+
xM+
xL+
xK+
bx J+
bx I+
bx H+
bx G+
xF+
bx E+
bx D+
bx C+
bx B+
bx A+
bx @+
x?+
bx >+
x=+
x<+
bx ;+
b0xxxxxxxxx :+
b0xxxxxxxxxxxxxxxxxxxxxxxx 9+
bx 8+
bx 7+
x6+
x5+
bx 4+
b0xxxxxxxxx 3+
b0xxxxxxxxxxxxxxxxxxxxxxxx 2+
bzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 1+
x0+
x/+
x.+
bx -+
bx ,+
bx ++
bx *+
bx )+
bx (+
bx '+
bx &+
bx %+
bx $+
b0xxxx #+
b0xxxx "+
b0xxxx !+
b0xxxx ~*
b0xxxx }*
b0xxxx |*
b0xxxx {*
b0xxxx z*
b0xxx y*
b0xxx x*
b0xxx w*
b0xxx v*
b0xx u*
b0xx t*
b0x s*
b0 r*
bx q*
bx p*
bx o*
bx n*
bx m*
bx l*
bx k*
bx j*
xi*
xh*
bx g*
xf*
bx e*
bx d*
bx0 c*
xb*
xa*
bx `*
bz _*
bz ^*
bx ]*
bx \*
bx [*
bx Z*
bx Y*
bx X*
bx W*
bx V*
b0xxxx U*
b0xxxx T*
b0xxxx S*
b0xxxx R*
b0xxxx Q*
b0xxxx P*
b0xxxx O*
b0xxxx N*
b0xxx M*
b0xxx L*
b0xxx K*
b0xxx J*
b0xx I*
b0xx H*
b0x G*
b0 F*
bx E*
bz D*
bx C*
bz B*
bx A*
bx @*
bx ?*
bz >*
x=*
x<*
bz ;*
x:*
bx 9*
bzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 8*
bx0 7*
z6*
x5*
bz 4*
bx 3*
bx 2*
bx 1*
bx 0*
1/*
bx .*
bx -*
bx ,*
bx +*
bx **
bx )*
bx (*
x'*
x&*
x%*
x$*
x#*
x"*
x!*
x~)
x})
x|)
x{)
xz)
xy)
xx)
b0xxxxxxxxxxxxxxxxxxxxxxxx w)
b0xxxxxxxxxxxxxxxxxxxxxxxx v)
bx u)
bx t)
xs)
xr)
bzxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx q)
bx p)
bx o)
bx n)
xm)
bx l)
bx k)
bx j)
bx i)
b0xxxxxxxxx h)
b0xxxxxxxxx g)
bx f)
bx e)
zd)
xc)
xb)
bx a)
b0xxxxxxxxxxxxxxxxxxxxxxxx0 `)
x_)
x^)
x])
x\)
bx [)
bz Z)
bx0 Y)
xX)
bx W)
xV)
xU)
bx T)
xS)
xR)
xQ)
xP)
xO)
xN)
xM)
xL)
xK)
1J)
xI)
xH)
xG)
0F)
bx E)
bz D)
xC)
bx B)
bx A)
bx @)
bx ?)
bx >)
bx =)
bx <)
bx ;)
bx :)
bz 9)
bx 8)
x7)
x6)
bx 5)
b0xxxxxxxxx 4)
b0xxxxxxxxxxxxxxxxxxxxxxxx 3)
x2)
bx 1)
bx 0)
bx /)
b
bx -)
bx ,)
bx +)
bx *)
bx11 ))
bx ()
bx ')
bx &)
b0xxxxxxxxxxxxxxxxxxxxxxxxx1 %)
x$)
x#)
x")
bx0 !)
x~(
x}(
x|(
x{(
xz(
bx y(
bx x(
bx w(
xv(
bx u(
xt(
xs(
xr(
xq(
bx p(
bx o(
bx n(
xm(
xl(
xk(
xj(
b0xxxxxxxxxxxxxxxxxxxxxxxx i(
bx h(
bx g(
bx f(
xe(
xd(
xc(
xb(
xa(
b0xxxxxxxxx `(
x_(
x^(
bx ](
x\(
bz [(
xZ(
xY(
xX(
xW(
xV(
xU(
xT(
bx S(
xR(
xQ(
bx P(
bx O(
xN(
bx M(
bx L(
bx K(
bx J(
bx I(
xH(
bx G(
xF(
xE(
xD(
bx C(
bx B(
bx A(
bx @(
x?(
bx >(
bx =(
bx <(
bx ;(
bx :(
bx 9(
x8(
bx 7(
x6(
x5(
bx 4(
b0xxxxxxxxx 3(
b0xxxxxxxxxxxxxxxxxxxxxxxx 2(
bx 1(
bx 0(
x/(
x.(
bx -(
b0xxxxxxxxx ,(
b0xxxxxxxxxxxxxxxxxxxxxxxx +(
bx *(
x)(
x((
x'(
bx &(
bx %(
bx $(
bx #(
bx "(
bx !(
bx ~'
bx }'
bx |'
bx {'
b0xxxx z'
b0xxxx y'
b0xxxx x'
b0xxxx w'
b0xxxx v'
b0xxxx u'
b0xxxx t'
b0xxxx s'
b0xxx r'
b0xxx q'
b0xxx p'
b0xxx o'
b0xx n'
b0xx m'
b0x l'
b0 k'
bx j'
bx i'
bx h'
bx g'
bx f'
bx e'
bx d'
bx c'
xb'
xa'
bx `'
x_'
bx ^'
bx ]'
bx0 \'
x['
xZ'
bx Y'
bz X'
bz W'
bx V'
bx U'
bx T'
bx S'
bx R'
bx Q'
bx P'
bx O'
b0xxxx N'
b0xxxx M'
b0xxxx L'
b0xxxx K'
b0xxxx J'
b0xxxx I'
b0xxxx H'
b0xxxx G'
b0xxx F'
b0xxx E'
b0xxx D'
b0xxx C'
b0xx B'
b0xx A'
b0x @'
b0 ?'
bx >'
bz ='
bx <'
bz ;'
bx :'
bx 9'
bx 8'
bz 7'
x6'
x5'
bz 4'
x3'
bx 2'
bx 1'
bx0 0'
x/'
x.'
bxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz -'
bx ,'
bx +'
bx *'
bx )'
1('
bx ''
bx &'
bx %'
bx $'
bx #'
bx "'
bx !'
x~&
x}&
x|&
x{&
xz&
xy&
xx&
xw&
xv&
xu&
xt&
xs&
xr&
xq&
b0xxxxxxxxxxxxxxxxxxxxxxxx p&
b0xxxxxxxxxxxxxxxxxxxxxxxx o&
bx n&
bx m&
xl&
xk&
bx j&
bx i&
bx h&
bx g&
xf&
bx e&
bx d&
bx c&
bx b&
b0xxxxxxxxx a&
b0xxxxxxxxx `&
bx _&
bx ^&
x]&
x\&
x[&
bx Z&
b0xxxxxxxxxxxxxxxxxxxxxxxx0 Y&
xX&
xW&
xV&
xU&
bx T&
bz S&
bx0 R&
xQ&
bx P&
xO&
xN&
bx M&
xL&
xK&
xJ&
xI&
xH&
xG&
xF&
xE&
xD&
1C&
xB&
xA&
x@&
0?&
bx >&
bxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz =&
bx <&
bx ;&
bx :&
bx 9&
bx 8&
bx 7&
bx 6&
bx 5&
bx000 4&
bx 3&
x2&
x1&
bx 0&
x/&
x.&
bx -&
bx ,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x"&
b0 !&
0~%
1}%
0|%
0{%
b10000 z%
b0 y%
1x%
0w%
0v%
0u%
1t%
0s%
0r%
0q%
0p%
0o%
b0 n%
bx m%
xl%
bx k%
xj%
bx i%
xh%
bx g%
0f%
bx e%
xd%
bx c%
bz b%
bx a%
x`%
bx000 _%
bx ^%
x]%
x\%
x[%
bx Z%
bx Y%
bx X%
xW%
b0 V%
bx U%
bx T%
xS%
xR%
bx Q%
bx P%
bx O%
b0xxxxx N%
bx M%
bx L%
bx K%
bx J%
bx I%
b0 H%
bx G%
bx F%
bx E%
bx D%
xC%
bx B%
bx A%
bx @%
0?%
x>%
x=%
bx <%
b10000 ;%
0:%
09%
bx 8%
x7%
x6%
x5%
x4%
13%
02%
01%
x0%
bz /%
x.%
bx -%
x,%
0+%
bx *%
x)%
0(%
b0 '%
bx0x00 &%
0%%
x$%
bx #%
bx "%
bx !%
bx ~$
bx }$
bx |$
bx {$
bx z$
bx000 y$
bx x$
xw$
xv$
bx u$
xt$
xs$
bx r$
bx q$
xp$
xo$
xn$
xm$
xl$
xk$
xj$
xi$
xh$
xg$
b0 f$
0e$
1d$
0c$
0b$
b10000 a$
b0 `$
1_$
0^$
0]$
0\$
1[$
0Z$
0Y$
0X$
0W$
0V$
b0 U$
bx T$
xS$
bx R$
xQ$
bx P$
xO$
bx N$
0M$
bx L$
xK$
bx J$
bz I$
bx H$
xG$
bx000 F$
bx E$
xD$
xC$
xB$
bx A$
bx @$
bx ?$
x>$
b0 =$
bx <$
bx ;$
x:$
x9$
bx 8$
bx 7$
bx 6$
b0xxxxx 5$
bx 4$
bx 3$
bx 2$
bx 1$
bx 0$
b0 /$
bx .$
bx -$
bx ,$
bx +$
x*$
bx )$
bx ($
bx '$
0&$
x%$
x$$
bx #$
b10000 "$
0!$
0~#
bx }#
x|#
x{#
xz#
xy#
1x#
0w#
0v#
xu#
bz t#
xs#
bx r#
xq#
0p#
bx o#
xn#
0m#
b0 l#
bx0x00 k#
0j#
xi#
bx h#
bx g#
bx f#
bx e#
bx d#
bx c#
bx b#
bx a#
bx000 `#
bz _#
x^#
x]#
x\#
x[#
bx Z#
bz Y#
xX#
zW#
xV#
xU#
xT#
xS#
xR#
xQ#
xP#
xO#
bz N#
b0 M#
0L#
1K#
0J#
0I#
b10000 H#
b0 G#
1F#
0E#
0D#
0C#
1B#
0A#
0@#
0?#
0>#
0=#
b0 <#
bx ;#
x:#
bx 9#
x8#
bx 7#
x6#
bx 5#
04#
bx 3#
x2#
bx 1#
bz 0#
bx /#
x.#
bx000 -#
bx ,#
x+#
x*#
x)#
bx0x00 (#
bx '#
bx &#
bx %#
x$#
b0 ##
bz "#
bz !#
x~"
x}"
bx |"
bx {"
b0xxxxx z"
bx y"
bx x"
bx w"
bx v"
bx u"
b0 t"
bz s"
bz r"
bx q"
bx p"
bx o"
xn"
bx m"
bx l"
bx k"
0j"
zi"
xh"
bx g"
b10000 f"
0e"
0d"
bx c"
xb"
xa"
x`"
x_"
1^"
0]"
0\"
x["
bz Z"
xY"
xX"
0W"
bx V"
xU"
0T"
bz S"
b0 R"
0Q"
xP"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx000 G"
bz F"
xE"
xD"
xC"
xB"
bx A"
bz @"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
bxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz 5"
b0 4"
03"
12"
01"
00"
b10000 /"
b0 ."
1-"
0,"
0+"
0*"
1)"
0("
0'"
0&"
0%"
0$"
b0 #"
bx ""
x!"
bx ~
x}
bx |
x{
bx z
0y
bx x
xw
bx v
bz u
bx t
xs
bx000 r
bx q
xp
xo
xn
bx0x00 m
bx l
bx k
bx j
xi
b0 h
bz g
bz f
xe
xd
bx c
bx b
b0xxxxx a
bx `
bx _
bx ^
bx ]
bx \
b0 [
bz Z
bz Y
bx X
bx W
bx V
xU
bx T
bx S
bx R
0Q
xP
xO
bx N
b10000 M
0L
0K
bx J
xI
xH
xG
xF
1E
0D
0C
xB
bz A
x@
x?
bx >
x=
0<
bxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz ;
b0 :
09
x8
bx0x00 7
bx 6
bx 5
bx0xxx 4
bx0xxx 3
bx 2
bx 1
bx 0
bx0x00 /
bx .
bx -
z,
bxzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz +
bx *
bx )
bx0x00 (
z'
bz &
b0 %
bz $
b1 #
bx "
z!
$end
