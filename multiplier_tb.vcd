$date
	Fri Dec 27 01:48:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module multiplier_tb $end
$var wire 32 ! out [31:0] $end
$var wire 5 " exceptions [4:0] $end
$var reg 32 # a [31:0] $end
$var reg 32 $ b [31:0] $end
$var reg 3 % round_mode [2:0] $end
$scope module dut $end
$var wire 32 & a [31:0] $end
$var wire 32 ' b [31:0] $end
$var wire 1 ( infinite_excep $end
$var wire 1 ) invalid_excep $end
$var wire 1 * is_a_zero $end
$var wire 1 + is_b_zero $end
$var wire 1 , is_out_NaN $end
$var wire 1 - is_out_inf $end
$var wire 1 . is_out_zero $end
$var wire 3 / round_mode [2:0] $end
$var wire 1 0 sign_res $end
$var wire 23 1 subnorm_mant_b [22:0] $end
$var wire 23 2 subnorm_mant_a [22:0] $end
$var wire 1 3 sign_oper2 $end
$var wire 1 4 sign_oper1 $end
$var wire 1 5 sign_b $end
$var wire 1 6 sign_a $end
$var wire 10 7 sexp_2 [9:0] $end
$var wire 10 8 sexp_1 [9:0] $end
$var wire 27 9 prod_comp [26:0] $end
$var wire 32 : out [31:0] $end
$var wire 33 ; oper2 [32:0] $end
$var wire 33 < oper1 [32:0] $end
$var wire 5 = norm_dist_b [4:0] $end
$var wire 5 > norm_dist_a [4:0] $end
$var wire 48 ? mant_prod [47:0] $end
$var wire 23 @ mant_oper2 [22:0] $end
$var wire 23 A mant_oper1 [22:0] $end
$var wire 1 B mant_b_zero $end
$var wire 23 C mant_b [22:0] $end
$var wire 1 D mant_a_zero $end
$var wire 23 E mant_a [22:0] $end
$var wire 25 F mant_2 [24:0] $end
$var wire 25 G mant_1 [24:0] $end
$var wire 1 H is_zero_oper2 $end
$var wire 1 I is_zero_oper1 $end
$var wire 1 J is_b_special $end
$var wire 1 K is_a_special $end
$var wire 9 L expb [8:0] $end
$var wire 9 M expa [8:0] $end
$var wire 10 N exp_unbais [9:0] $end
$var wire 9 O exp_oper2 [8:0] $end
$var wire 9 P exp_oper1 [8:0] $end
$var wire 1 Q exp_b_zero $end
$var wire 8 R exp_b [7:0] $end
$var wire 1 S exp_a_zero $end
$var wire 8 T exp_a [7:0] $end
$var wire 5 U exceptions [4:0] $end
$var wire 10 V check_b [9:0] $end
$var wire 10 W check_a [9:0] $end
$var wire 9 X adj_exp_b [8:0] $end
$var wire 9 Y adj_exp_a [8:0] $end
$scope module norm_a $end
$var wire 23 Z in [22:0] $end
$var wire 24 [ one_least_reverse_in [23:0] $end
$var wire 23 \ reverse_in [22:0] $end
$var wire 5 ] count [4:0] $end
$scope begin bt[0] $end
$var wire 5 ^ count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 _ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 ` count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 a count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 b count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 c count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 d count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 e count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 f count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 g count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 h count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 i count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 j count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 k count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 l count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 m count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 n count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 o count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 p count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 q count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 r count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 s count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 t count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 u count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 v in [22:0] $end
$var wire 23 w out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module norm_b $end
$var wire 23 x in [22:0] $end
$var wire 24 y one_least_reverse_in [23:0] $end
$var wire 23 z reverse_in [22:0] $end
$var wire 5 { count [4:0] $end
$scope begin bt[0] $end
$var wire 5 | count_so_far [4:0] $end
$scope begin genblk2 $end
$upscope $end
$upscope $end
$scope begin bt[1] $end
$var wire 5 } count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[2] $end
$var wire 5 ~ count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[3] $end
$var wire 5 !" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[4] $end
$var wire 5 "" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[5] $end
$var wire 5 #" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[6] $end
$var wire 5 $" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[7] $end
$var wire 5 %" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[8] $end
$var wire 5 &" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[9] $end
$var wire 5 '" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[10] $end
$var wire 5 (" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[11] $end
$var wire 5 )" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[12] $end
$var wire 5 *" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[13] $end
$var wire 5 +" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[14] $end
$var wire 5 ," count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[15] $end
$var wire 5 -" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[16] $end
$var wire 5 ." count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[17] $end
$var wire 5 /" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[18] $end
$var wire 5 0" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[19] $end
$var wire 5 1" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[20] $end
$var wire 5 2" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[21] $end
$var wire 5 3" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[22] $end
$var wire 5 4" count_so_far [4:0] $end
$scope begin genblk3 $end
$upscope $end
$upscope $end
$scope begin bt[23] $end
$var wire 5 5" count_so_far [4:0] $end
$scope begin genblk3 $end
$scope begin genblk4 $end
$upscope $end
$upscope $end
$upscope $end
$scope module reverse_num $end
$var wire 23 6" in [22:0] $end
$var wire 23 7" out [22:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$upscope $end
$upscope $end
$scope module round_exception $end
$var wire 27 8" adjusted_mant [26:0] $end
$var wire 1 9" common_case $end
$var wire 1 , in_is_NaN $end
$var wire 1 - in_is_inf $end
$var wire 1 . in_is_zero $end
$var wire 27 :" in_mant [26:0] $end
$var wire 10 ;" in_sexp [9:0] $end
$var wire 1 0 in_sign $end
$var wire 1 <" inexact $end
$var wire 1 ( infinite_excep $end
$var wire 1 ) invalid_excep $end
$var wire 1 =" is_out_NaN $end
$var wire 23 >" mant_out [22:0] $end
$var wire 1 ?" notNaN_is_inf_out $end
$var wire 1 @" notNaN_is_special_inf_out $end
$var wire 1 A" overflow $end
$var wire 1 B" overflow_round_magup $end
$var wire 1 C" peg_max_finite_mag_out $end
$var wire 1 D" peg_min_nonzero_mag_out $end
$var wire 1 E" round_mag_up $end
$var wire 3 F" round_mode [2:0] $end
$var wire 1 G" underflow $end
$var wire 5 H" subnorm_shift_dist [4:0] $end
$var wire 1 I" sign_res $end
$var wire 1 J" sign_out $end
$var wire 10 K" s_exp [9:0] $end
$var wire 1 L" roundmode_near_even $end
$var wire 1 M" roundmode_min_mag $end
$var wire 1 N" roundmode_min $end
$var wire 1 O" roundmode_max_mag $end
$var wire 1 P" roundmode_max $end
$var wire 32 Q" result [31:0] $end
$var wire 33 R" out [32:0] $end
$var wire 23 S" mant_res [22:0] $end
$var wire 25 T" mant [24:0] $end
$var wire 1 U" is_zero $end
$var wire 1 V" is_subnorm $end
$var wire 1 W" is_inf $end
$var wire 1 X" is_NaN $end
$var wire 8 Y" exp_res [7:0] $end
$var wire 9 Z" exp_out [8:0] $end
$var wire 5 [" exceptions [4:0] $end
$var wire 1 \" do_shift_mant_down1 $end
$var wire 1 ]" common_underflow $end
$var wire 1 ^" common_total_underflow $end
$var wire 1 _" common_overflow $end
$var wire 23 `" common_mant_out [22:0] $end
$var wire 1 a" common_inexact $end
$var wire 9 b" common_exp_out [8:0] $end
$var wire 10 c" adjusted_sexp [9:0] $end
$scope function clog2 $end
$var integer 32 d" a [31:0] $end
$upscope $end
$scope begin genblk2 $end
$var wire 1 e" any_round $end
$var wire 1 f" any_round_extra $end
$var wire 1 g" round_carry $end
$var wire 1 h" round_incr $end
$var wire 1 i" round_pos_bit $end
$var wire 27 j" round_pos_mask [26:0] $end
$var wire 1 k" unbound_range_any_round $end
$var wire 1 l" unbound_range_round_incr $end
$var wire 1 m" unbound_range_round_posbit $end
$var wire 27 n" shifted_round_mask [26:0] $end
$var wire 11 o" sext_adjusted_exp [10:0] $end
$var wire 11 p" s_rounded_exp [10:0] $end
$var wire 26 q" rounded_mant [25:0] $end
$var wire 27 r" roundMask [26:0] $end
$scope begin genblk4 $end
$var wire 25 s" roundMask_main [24:0] $end
$scope module lowmask_roundmask $end
$var wire 9 t" in [8:0] $end
$var wire 25 u" reverse_out [24:0] $end
$var wire 25 v" out [24:0] $end
$var wire 513 w" c [512:0] $end
$scope module reverse_lo $end
$var wire 25 x" in [24:0] $end
$var wire 25 y" out [24:0] $end
$scope begin bt[0] $end
$upscope $end
$scope begin bt[1] $end
$upscope $end
$scope begin bt[2] $end
$upscope $end
$scope begin bt[3] $end
$upscope $end
$scope begin bt[4] $end
$upscope $end
$scope begin bt[5] $end
$upscope $end
$scope begin bt[6] $end
$upscope $end
$scope begin bt[7] $end
$upscope $end
$scope begin bt[8] $end
$upscope $end
$scope begin bt[9] $end
$upscope $end
$scope begin bt[10] $end
$upscope $end
$scope begin bt[11] $end
$upscope $end
$scope begin bt[12] $end
$upscope $end
$scope begin bt[13] $end
$upscope $end
$scope begin bt[14] $end
$upscope $end
$scope begin bt[15] $end
$upscope $end
$scope begin bt[16] $end
$upscope $end
$scope begin bt[17] $end
$upscope $end
$scope begin bt[18] $end
$upscope $end
$scope begin bt[19] $end
$upscope $end
$scope begin bt[20] $end
$upscope $end
$scope begin bt[21] $end
$upscope $end
$scope begin bt[22] $end
$upscope $end
$scope begin bt[23] $end
$upscope $end
$scope begin bt[24] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mac_spec_check_out $end
$var wire 33 z" in [32:0] $end
$var wire 1 W" is_inf $end
$var wire 1 X" is_qNaN $end
$var wire 1 {" is_sNaN $end
$var wire 1 I" sign $end
$var wire 25 |" sig [24:0] $end
$var wire 10 }" s_exp [9:0] $end
$var wire 23 ~" mant [22:0] $end
$var wire 1 U" is_zero $end
$var wire 1 !# is_ssNaN $end
$var wire 1 "# is_spec $end
$var wire 9 ## exp [8:0] $end
$upscope $end
$upscope $end
$scope module spec_check_a $end
$var wire 32 $# in [31:0] $end
$var wire 1 %# is_neg_inf $end
$var wire 1 &# is_neg_subnorm $end
$var wire 1 '# is_neg_zero $end
$var wire 1 (# is_pos_inf $end
$var wire 1 )# is_pos_subnorm $end
$var wire 1 *# is_pos_zero $end
$var wire 1 +# is_qNaN $end
$var wire 1 ,# is_sNaN $end
$var wire 1 -# sign $end
$var wire 1 .# sig_zero $end
$var wire 23 /# sig [22:0] $end
$var wire 10 0# result [9:0] $end
$var wire 1 1# is_pos_norm $end
$var wire 1 2# is_neg_norm $end
$var wire 1 3# exp_zero $end
$var wire 1 4# exp_one $end
$var wire 8 5# exp [7:0] $end
$upscope $end
$scope module spec_check_b $end
$var wire 32 6# in [31:0] $end
$var wire 1 7# is_neg_inf $end
$var wire 1 8# is_neg_subnorm $end
$var wire 1 9# is_neg_zero $end
$var wire 1 :# is_pos_inf $end
$var wire 1 ;# is_pos_subnorm $end
$var wire 1 <# is_pos_zero $end
$var wire 1 =# is_qNaN $end
$var wire 1 ># is_sNaN $end
$var wire 1 ?# sign $end
$var wire 1 @# sig_zero $end
$var wire 23 A# sig [22:0] $end
$var wire 10 B# result [9:0] $end
$var wire 1 C# is_pos_norm $end
$var wire 1 D# is_neg_norm $end
$var wire 1 E# exp_zero $end
$var wire 1 F# exp_one $end
$var wire 8 G# exp [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b10000000 G#
0F#
0E#
0D#
1C#
b1000000 B#
b1000000000000000000000 A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
b1000000001000000000000000000000 6#
b10000000 5#
04#
03#
02#
11#
b1000000 0#
b10000000000000000000000 /#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
b1000000010000000000000000000000 $#
b100000010 ##
0"#
0!#
b11100000000000000000000 ~"
b100000010 }"
b111100000000000000000000 |"
0{"
b10000001011100000000000000000000 z"
b0 y"
b0 x"
bw"
b0 v"
b0 u"
b100000010 t"
b0 s"
b11 r"
b111100000000000000000000 q"
b100000010 p"
b100000010 o"
b1 n"
0m"
0l"
0k"
b10 j"
0i"
0h"
0g"
0f"
0e"
bx d"
b100000010 c"
b100000010 b"
0a"
b11100000000000000000000 `"
0_"
0^"
0]"
0\"
b0 ["
b100000010 Z"
b10000001 Y"
0X"
0W"
0V"
0U"
b111100000000000000000000 T"
b11100000000000000000000 S"
b10000001011100000000000000000000 R"
b1000000111100000000000000000000 Q"
0P"
0O"
0N"
0M"
1L"
b100000010 K"
0J"
0I"
b11111 H"
0G"
b0 F"
0E"
0D"
0C"
1B"
0A"
0@"
0?"
b11100000000000000000000 >"
0="
0<"
b100000010 ;"
b11110000000000000000000000 :"
19"
b11110000000000000000000000 8"
b10 7"
b1000000000000000000000 6"
b1 5"
b1 4"
b1 3"
b1 2"
b1 1"
b1 0"
b1 /"
b1 ."
b1 -"
b1 ,"
b1 +"
b1 *"
b1 )"
b1 ("
b1 '"
b1 &"
b1 %"
b1 $"
b1 #"
b1 ""
b1 !"
b1 ~
b1 }
b0 |
b1 {
b10 z
b10 y
b1000000000000000000000 x
b1 w
b10000000000000000000000 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b1 \
b1 [
b10000000000000000000000 Z
b100000001 Y
b100000001 X
b1000000 W
b1000000 V
b0 U
b10000000 T
0S
b10000000 R
0Q
b100000001 P
b100000001 O
b100000010 N
b100000001 M
b100000001 L
0K
0J
0I
0H
b110000000000000000000000 G
b101000000000000000000000 F
b10000000000000000000000 E
0D
b1000000000000000000000 C
0B
b10000000000000000000000 A
b1000000000000000000000 @
b11110000000000000000000000000000000000000000000 ?
b0 >
b1 =
b10000000110000000000000000000000 <
b10000000101000000000000000000000 ;
b1000000111100000000000000000000 :
b11110000000000000000000000 9
b100000001 8
b100000001 7
06
05
04
03
b0 2
b0 1
00
b0 /
0.
0-
0,
0+
0*
0)
0(
b1000000001000000000000000000000 '
b1000000010000000000000000000000 &
b0 %
b1000000001000000000000000000000 $
b1000000010000000000000000000000 #
b0 "
b1000000111100000000000000000000 !
$end
#10
b11000000111100000000000000000000 !
b11000000111100000000000000000000 :
b11000000111100000000000000000000 Q"
1I"
01#
b110000001011100000000000000000000 R"
b110000001011100000000000000000000 z"
1J"
b10 W
b10 0#
12#
14
10
b110000000110000000000000000000000 <
16
1-#
b11000000010000000000000000000000 #
b11000000010000000000000000000000 &
b11000000010000000000000000000000 $#
#20
b0 Y"
1U"
b10110 H"
1V"
b101011 K"
b101011 }"
b101011 ##
b101011 Z"
b0 S"
b11111111111111111111111111 n"
b100000000000000000000000000 j"
b0 T"
b0 |"
b0 ~"
b111111111111111111111111111 r"
b0 `"
b0 >"
b1111111111111111111111111 s"
b1111111111111111111111111 v"
b1111111111111111111111111 y"
0<"
b1111111111111111111111111 u"
b1111111111111111111111111 x"
b0 q"
09"
b0 "
b0 U
b0 ["
0G"
b10111 >
b10111 ]
b10111 u
1.
b101011 b"
1a"
1]"
1I
1^"
b101011 p"
b101011 t"
b0 !
b0 :
b0 Q"
0I"
b101011 o"
b101011 c"
b101011 N
b101011 ;"
b101010 8
b101010 P
b0 8"
b0 9
b0 :"
01#
b10101100000000000000000000000 R"
b10101100000000000000000000000 z"
0J"
b101010 M
b0 ?
b0 G
b0 A
b100000000000000000000000 [
02#
b10000 W
b10000 0#
1*#
04
00
b1101010 Y
1*
b0 \
b0 w
13#
1.#
b10101000000000000000000000000 <
06
1S
b0 T
1D
b0 E
b0 Z
b0 v
0-#
b0 5#
b0 /#
b0 #
b0 &
b0 $#
#30
b10 t
b10 s
b10 r
b1101000000000000000000 S"
b10 q
b10 p
b1101000000000000000000 ~"
b1101000000000000000000 >"
b10 o
b1001101000000000000000000 !
b1001101000000000000000000 :
b1001101000000000000000000 Q"
b10 Y"
b10 n
b101101000000000000000000 T"
b101101000000000000000000 |"
0U"
0V"
b1101000000000000000000 `"
b10 m
0a"
b10 l
b101101000000000000000000 q"
b11110 H"
b10 k
b10000011 K"
b10000011 }"
b10000011 ##
b10 j
b1000001101101000000000000000000 R"
b1000001101101000000000000000000 z"
b10000011 Z"
b10 i
b10 h
b1 n"
b10 j"
0G"
b10 g
b11 r"
b10 f
b0 s"
b0 v"
b0 y"
b10 e
11#
b0 u"
b0 x"
b10 d
b0 "
b0 U
b0 ["
0<"
b10 c
0]"
0e"
b10 b
b0 2
19"
0^"
0f"
b10 a
b10 >
b10 ]
b10 u
0.
b10000011 b"
b10 `
0I
b10000011 p"
b10000011 t"
b10000011 o"
b10000011 c"
b10000011 N
b10000011 ;"
b10000010 8
b10000010 P
b10110100000000000000000000 8"
b10110100000000000000000000 9
b10110100000000000000000000 :"
b10000010 M
b10110100000000000000000000000000000000000000000 ?
b100100000000000000000000 G
b100000000000000000000 A
b100 [
0)#
b1000000 W
b1000000 0#
0*#
b10000010 Y
b1000001000100000000000000000000 <
0*
b100 \
b100 w
03#
0.#
0S
b1 T
0D
b100000000000000000000 E
b100000000000000000000 Z
b100000000000000000000 v
b1 5#
b100000000000000000000 /#
b100100000000000000000000 #
b100100000000000000000000 &
b100100000000000000000000 $#
#40
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b11111111 Y"
b0 m
b1111111100000000000000000000000 !
b1111111100000000000000000000000 :
b1111111100000000000000000000000 Q"
b0 S"
b0 l
b0 H"
b0 k
1W"
b0 j
1"#
b101000000000000000000000 T"
b101000000000000000000000 |"
b1000000000000000000000 ~"
b0 i
b110000001 K"
b110000001 }"
b110000001 ##
b1000000000000000000000 >"
b0 h
b11000000101000000000000000000000 R"
b11000000101000000000000000000000 z"
b110000001 Z"
b0 g
b0 f
b1 n"
b10 j"
b0 e
09"
b11 r"
b1000000000000000000000 `"
b0 d
1?"
0<"
b0 s"
b0 v"
b0 y"
b0 c
01#
1@"
b0 "
b0 U
b0 ["
0A"
b0 u"
b0 x"
b101000000000000000000000 q"
b0 b
1-
1_"
b0 a
b10111 >
b10111 ]
b10111 u
b110000001 b"
b0 `
b110000001 p"
b110000001 t"
b110000001 o"
b110000001 c"
b110000001 N
b110000001 ;"
b110000000 8
b110000000 P
b10100000000000000000000000 8"
b10100000000000000000000000 9
b10100000000000000000000000 :"
b10000000 W
b10000000 0#
1(#
1K
b110000000 M
b10100000000000000000000000000000000000000000000 ?
b100000000000000000000000 G
b0 A
b100000000000000000000000 [
b110000000 Y
b11000000000000000000000000000000 <
b0 \
b0 w
14#
1.#
b11111111 T
1D
b0 E
b0 Z
b0 v
b11111111 5#
b0 /#
b1111111100000000000000000000000 #
b1111111100000000000000000000000 &
b1111111100000000000000000000000 $#
#50
b1111111110000000000000000000000 !
b1111111110000000000000000000000 :
b1111111110000000000000000000000 Q"
b10000000000000000000000 S"
1X"
0W"
b110000000000000000000000 T"
b110000000000000000000000 |"
b10000000000000000000000 ~"
b111000001 K"
b111000001 }"
b111000001 ##
1!#
b10000000000000000000000 >"
b11100000110000000000000000000000 R"
b11100000110000000000000000000000 z"
b111000001 Z"
b11100000000000000000000 `"
0?"
b111100000000000000000000 q"
1="
0@"
b0 >
b0 ]
b0 u
0-
1,
b111000001 b"
b111000001 p"
b111000001 t"
b11110000000000000000000000 8"
b11110000000000000000000000 9
b11110000000000000000000000 :"
1+#
b111000001 o"
b111000001 c"
b111000001 N
b111000001 ;"
b111000000 8
b111000000 P
b11110000000000000000000000000000000000000000000 ?
b110000000000000000000000 G
b10000000000000000000000 A
b1 [
b1000000000 W
b1000000000 0#
0(#
b111000000 M
b11100000010000000000000000000000 <
b1 \
b1 w
0.#
0D
b10000000000000000000000 E
b10000000000000000000000 Z
b10000000000000000000000 v
b10000000000000000000000 /#
b1111111110000000000000000000000 #
b1111111110000000000000000000000 &
b1111111110000000000000000000000 $#
#60
b10000001 Y"
0X"
0"#
0!#
b11111 H"
b1000000111100000000000000000000 !
b1000000111100000000000000000000 :
b1000000111100000000000000000000 Q"
b11100000000000000000000 S"
b100000010 K"
b100000010 }"
b100000010 ##
b100000010 Z"
b111100000000000000000000 T"
b111100000000000000000000 |"
b11100000000000000000000 ~"
b10000001011100000000000000000000 R"
b10000001011100000000000000000000 z"
b11100000000000000000000 >"
19"
0="
0_"
11#
b100000010 b"
0,
b100000010 p"
b100000010 t"
b100000010 o"
b100000010 c"
b100000010 N
b100000010 ;"
b100000001 8
b100000001 P
b1000000 W
b1000000 0#
0+#
0K
b10000000110000000000000000000000 <
b100000001 M
0B"
b100000001 Y
04#
b10000000 T
b10000000 5#
0L"
1M"
b1 %
b1 /
b1 F"
b1000000010000000000000000000000 #
b1000000010000000000000000000000 &
b1000000010000000000000000000000 $#
#70
0M"
1N"
b10 %
b10 /
b10 F"
#80
